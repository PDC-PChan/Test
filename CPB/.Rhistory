break
}else
{
lastFitPar = fit$par
}
}
# predict the next element
targetSet = seq(1,length(mySeries),by = step)
ts.target = rev(rev(mySeries)[targetSet])
Theta.Fitted = fit$par
sp.Fitted <- KCAss(Theta.Fitted["h"], Theta.Fitted["q"], Theta.Fitted["sigma"],a0.Fitted,p0.Fitted)
FKF.Fitted <- fkf(a0 = sp.Fitted$a0, P0 = sp.Fitted$P0, dt = sp.Fitted$dt, ct = sp.Fitted$ct,
Tt = sp.Fitted$Tt,Zt = sp.Fitted$Zt, HHt = sp.Fitted$HHt, GGt = sp.Fitted$GGt,
yt = matrix(ts.target,nrow=1))
FKF.att = FKF.Fitted$att
return ((sp.Fitted$Tt %*% FKF.att[,ncol(FKF.att)])[1,1])
}
}
################################################################################################
## Augmented N Step Prediction Function
################################################################################################
{
AugmentedNStep = function(mySeries, step, degree)
{
N = length(mySeries)
return (mean(sapply(0:degree, function(i) SolidNStep(head(mySeries,(N-i)),step+i))))
}
}
################################################################################################
## Backtester
################################################################################################
KCA.Backtest = function(mySeries, myRange, step, method = "Solid", degree = 10)
{
## Create empty return object
returnObj = list()
## Insert original time series
returnObj$Original = mySeries[myRange]
## Insert prediction
if (method == "Solid") {
returnObj$Prediction = sapply(myRange, function(x) SolidNStep(head(mySeries,x-step),step))
}else
{
returnObj$Prediction = sapply(myRange, function(x) AugmentedNStep(head(mySeries,x-step),step,degree))
}
## Insert error time series
returnObj$Error = returnObj$Original - returnObj$Prediction
## Calculate Variance
returnObj$TotalVariance = var(returnObj$Error)
return(returnObj)
}
################################################################################################
## Read and clean series
################################################################################################
data = read.table("C:/Users/Samuel/Downloads/test.txt",header = F,sep = ",")
N = nrow(data)
################################################################################################
## Detect abnormality
################################################################################################
## Detect Zeros
LargerThanZero = as.logical((data$V3>0)*(data$V4>0))
data = data[LargerThanZero,]
N = nrow(data)
## Detect outliers
bidReturn = log(data$V3[2:N]) - log(data$V3[1:(N-1)])
askReturn = log(data$V4[2:N]) - log(data$V4[1:(N-1)])
abnormReturnTH = .001
StayVector = c(T,as.logical(sapply(bidReturn, function(x) return(x< abnormReturnTH && x>(-abnormReturnTH)))
* sapply(askReturn, function(x) return(x<abnormReturnTH && x>(-abnormReturnTH)))))
data = data[StayVector,]
N = nrow(data)
################################################################################################
## Last mini-second vector
################################################################################################
mySeries = (data$V3+data$V4)/2
V1 = data$V1
TimeSeries = unique(V1)
names(TimeSeries) = "V1"
myDT = data.frame(V1,mySeries)
DTmy = myDT[N:1,]
mySeries = DTmy[match(TimeSeries,DTmy[,1]),2]
################################################################################################
## Construct Loess
################################################################################################
myLoessSeries = LastLoessFunction(mySeries,1000)
my_LoessSeries = myLoessSeries[4500:length(myLoessSeries)]
aaa = KCA.Backtest(my_LoessSeries, myRange = 7200:7200, step = 600)
aaa
plot(my_LoessSeries,type = "l")
mplot
length(myLoessSeries)
length(mySeries)
plot(cbind(myLoessSeries,mySeries))
matplot(cbind(myLoessSeries,mySeries))
n = length(mySeries)
matplot(cbind(myLoessSeries,mySeries)[4500:n])
matplot(cbind(myLoessSeries,mySeries)[4500:n], type = "l")
matplot(cbind(myLoessSeries,mySeries)[4500:n,], type = "l")
myLoessSeries = LastLoessFunction(mySeries,2000)
matplot(cbind(myLoessSeries,mySeries)[4500:n,], type = "l")
aaa = KCA.Backtest(my_LoessSeries, myRange = 7200:7200, step = 600)
my_LoessSeries = myLoessSeries[4500:n]
aaa = KCA.Backtest(my_LoessSeries, myRange = 7200:7200, step = 600)
aaa
length(my_LoessSeries)
aaa = KCA.Backtest(my_LoessSeries, myRange = 5000:17500, step = 600)
aaa = KCA.Backtest(my_LoessSeries, myRange = 7000:17500, step = 600)
################################################################################################
## Initialization
################################################################################################
{
library(FKF)
library(reshape)
library(zoo)
library(numDeriv)
library(PerformanceAnalytics)
library(Hmisc)
}
################################################################################################
## Construct Loess Series
################################################################################################
{
lastLoess = function(mySeries,N)
{
n = min(length(mySeries), N)
x = 1:n
y = tail(mySeries,n)
m = loess(y~x)
return(tail(m$fitted,1))
}
### Running last Losss
LastLoessFunction = function(mySeries,N)
{
returnSeries = sapply(3:length(mySeries),
function(i,mySeries, N)
lastLoess(head(mySeries,i),N),
mySeries,N)
returnSeries = c(returnSeries[1],returnSeries[1],returnSeries)
return (returnSeries)
}
}
################################################################################################
## Construct Variance Series
################################################################################################
{
spread.Diff = spread - lastLoess.Spread
Var.Expanding = apply.fromstart(spread.Diff,FUN = "var")
wtVector = function(a,n)
{
return ((1-a)*a^((n-1):0))
}
wt.Var.Wrapper = function(x)
{
N = 400
n = min(length(x),N)
wtVec = c(rep(1,max(0,length(x)-N)),tail(1:N,n)^2)
return (wtd.var(x,wtVec))
}
Wtd.Var.Expanding = apply.fromstart(spread.Diff,FUN = "wt.Var.Wrapper")
}
################################################################################################
## Specify state space model
################################################################################################
{
KCAss <- function(h, q,sigma, mya0, myp0) {
Tt <- matrix(c(1,0,0,h,1,0,.5*h^2,h,1), ncol = 3)
Zt <- matrix(c(1, 0,0), ncol = 3)
ct <- matrix(0)
dt <- matrix(0, nrow = 3)
GGt <- matrix(sigma)
HHt <- diag(q,3)
return(list(a0 = mya0, P0 = myp0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
HHt = HHt))
}
}
################################################################################################
## Total Log Likelihood Function
################################################################################################
{
LLFunction = function(i,step,mySeries)
{
## Prepare Data #######################################################
targetSet = seq(1,length(mySeries),by = step) + i
ts.target = mySeries[targetSet]
NN = length(ts.target)
pos.N = ts.target
speed.N = pos.N[2:NN]-pos.N[1:(NN-1)]
acc.N = speed.N[2:(NN-1)]-speed.N[1:(NN-2)]
pos.N = pos.N[-NN]
speed.N = speed.N[-length(speed.N)]
acc.N = acc.N[-length(acc.N)]
speed.N = tail(speed.N,length(acc.N))
pos.N = tail(pos.N,length(acc.N))
Y.N = tail(ts.target,length(acc.N))
N = length(Y.N)
Length.Est = 5
Length.Train =  N
Length.Test = N
acc.Est = acc.N[1:Length.Est]
speed.Est = speed.N[1:Length.Est]
pos.Est = pos.N[1:Length.Est]
Y.Est = Y.N[1:Length.Est]
acc.Train = acc.N[(Length.Est+1):Length.Train]
speed.Train = speed.N[(Length.Est+1):Length.Train]
pos.Train = pos.N[(Length.Est+1):Length.Train]
Y.Train = Y.N[(Length.Est+1):Length.Train]
#   acc.Test = acc.N[(Length.Train+1):Length.Test]
#   speed.Test = speed.N[(Length.Train+1):Length.Test]
#   pos.Test = pos.N[(Length.Train+1):Length.Test]
#   Y.Test = Y.N[(Length.Train+1):Length.Test]
## Initial Estimates #######################################################
meanSqr = function(h)
{
A = matrix(c(1,h,.5*h^2),ncol = 1)
x = as.matrix(cbind(pos.Est,speed.Est,acc.Est))
error = Y.Est - x%*%A
return (t(error)%*%error)
}
h_optim = optimize(meanSqr,c(-100,100))
h.initial = h_optim$minimum
a0.Train = c(head(pos.Train,1),head(speed.Train,1),head(acc.Train,1))
p0.Train = cov(cbind(pos.Est,speed.Est,acc.Est))
## Specify state space model #################################################
#     KCAss <- function(h, q,sigma, mya0, myp0) {
#       Tt <- matrix(c(1,0,0,h,1,0,.5*h^2,h,1), ncol = 3)
#       Zt <- matrix(c(1, 0,0), ncol = 3)
#       ct <- matrix(0)
#       dt <- matrix(0, nrow = 3)
#       GGt <- matrix(sigma)
#       HHt <- diag(q,3)
#       return(list(a0 = mya0, P0 = myp0, ct = ct, dt = dt, Zt = Zt, Tt = Tt, GGt = GGt,
#                   HHt = HHt))
#     }
## The objective function passed to 'optim' ################################
objective <- function(theta) {
yt = matrix(Y.Train,nrow=1)
sp <- KCAss(theta["h"], theta["q"], theta["sigma"],a0.Train,p0.Train)
ans <- fkf(a0 = sp$a0, P0 = sp$P0, dt = sp$dt, ct = sp$ct, Tt = sp$Tt,
Zt = sp$Zt, HHt = sp$HHt, GGt = sp$GGt, yt = yt)
return(-ans$logLik)
}
return(objective)
}
TotalLLFunctions = function(theta, step, mySeries)
{
# Create the list of individual loglikelihood functions, i.e. L_i
LLFunctions = lapply(0:(step-1), LLFunction, step, mySeries)
# Create a function LL = sum(L_i)
llh = LLFunctions[[1]](theta)
for (i in (min(2,step)):(step)) {
llh  = llh + LLFunctions[[i]](theta)
}
return (llh)
}
}
################################################################################################
## Solid N Step Prediction Function
################################################################################################
{
SolidNStep = function (mySeries, step)
{
# Declare result structure
returnObj = list()
# Hard coded initial estimates
h.initial = 1
q.initial = 13.324388
sigma.inital = 27.2256663
a0.Fitted = c(1.12,.03,.57)
p0.Fitted = matrix(c(.203,.297,.308,.297,.579,.852,.308,.852,1.63),nrow = 3,byrow = T)
# optimize the Total Log likelihood function
firstGuess = c(h = h.initial,q = q.initial, sigma = sigma.inital)
fit = optim(firstGuess,TotalLLFunctions, NULL, step, mySeries)
lastFitPar = fit$par
# re-optimize until converge
for(i in 1:round(step/10,0))
{
fit = optim(lastFitPar, TotalLLFunctions,NULL, step, mySeries)
if (all(fit$par == lastFitPar)) {
break
}else
{
lastFitPar = fit$par
}
}
# predict the next element
targetSet = seq(1,length(mySeries),by = step)
ts.target = rev(rev(mySeries)[targetSet])
Theta.Fitted = fit$par
sp.Fitted <- KCAss(Theta.Fitted["h"], Theta.Fitted["q"], Theta.Fitted["sigma"],a0.Fitted,p0.Fitted)
FKF.Fitted <- fkf(a0 = sp.Fitted$a0, P0 = sp.Fitted$P0, dt = sp.Fitted$dt, ct = sp.Fitted$ct,
Tt = sp.Fitted$Tt,Zt = sp.Fitted$Zt, HHt = sp.Fitted$HHt, GGt = sp.Fitted$GGt,
yt = matrix(ts.target,nrow=1))
FKF.att = FKF.Fitted$att
# Set up return object
returnObj$theta = fit$par
returnObj$sp = sp.Fitted
returnObj$FKF = FKF.Fitted
returnObj$Prediction = (sp.Fitted$Tt %*% FKF.att[,ncol(FKF.att)])[1,1]
return (returnObj)
}
}
################################################################################################
## Augmented N Step Prediction Function
################################################################################################
{
AugmentedNStep = function(mySeries, step, degree)
{
N = length(mySeries)
return (mean(sapply(0:degree, function(i) (SolidNStep(head(mySeries,(N-i)),step+i))$Prediction)))
}
}
KCA.Backtest = function(mySeries, myRange, step, method = "Solid", degree = 10)
{
## Create empty return object
returnObj = list()
## Insert original time series
returnObj$Original = mySeries[myRange]
## Insert prediction
if (method == "Solid") {
returnObj$Prediction = sapply(myRange, function(x) SolidNStep(head(mySeries,x-step),step)$Prediction)
}else
{
returnObj$Prediction = sapply(myRange, function(x) AugmentedNStep(head(mySeries,x-step),step,degree))
}
## Insert error time series
returnObj$Error = returnObj$Original - returnObj$Prediction
## Calculate Variance
returnObj$TotalVariance = var(returnObj$Error)
return(returnObj)
}
################################################################################################
## Read and clean series
################################################################################################
data = read.table("C:/Users/Samuel/Downloads/test.txt",header = F,sep = ",")
N = nrow(data)
################################################################################################
## Detect abnormality
################################################################################################
## Detect Zeros
LargerThanZero = as.logical((data$V3>0)*(data$V4>0))
data = data[LargerThanZero,]
N = nrow(data)
## Detect outliers
bidReturn = log(data$V3[2:N]) - log(data$V3[1:(N-1)])
askReturn = log(data$V4[2:N]) - log(data$V4[1:(N-1)])
abnormReturnTH = .001
StayVector = c(T,as.logical(sapply(bidReturn, function(x) return(x< abnormReturnTH && x>(-abnormReturnTH)))
* sapply(askReturn, function(x) return(x<abnormReturnTH && x>(-abnormReturnTH)))))
data = data[StayVector,]
N = nrow(data)
################################################################################################
## Last mini-second vector
################################################################################################
mySeries = (data$V3+data$V4)/2
V1 = data$V1
TimeSeries = unique(V1)
names(TimeSeries) = "V1"
myDT = data.frame(V1,mySeries)
DTmy = myDT[N:1,]
mySeries = DTmy[match(TimeSeries,DTmy[,1]),2]
################################################################################################
## Construct Loess
################################################################################################
n = length(mySeries)
myLoessSeries = LastLoessFunction(mySeries,2000)
my_LoessSeries = myLoessSeries[4500:n]
aaa = SolidNStep(my_LoessSeries[1:10000],600)
names(aaa)
aaa$Prediction
aa = SolidNStep(my_LoessSeries[1:10000],60)
aa
names(aa)
aa$Prediction
my_LoessSeries[10060]
aa = SolidNStep(my_LoessSeries[1:10540],60)
aa$Prediction
my_LoessSeries[10600]
aa = SolidNStep(my_LoessSeries[1:10540],100)
aa$Prediction
my_LoessSeries[10640]
aa = SolidNStep(my_LoessSeries[1:10540],500)
aa = SolidNStep(my_LoessSeries[1:10540],300)
my_LoessSeries[10840]
aa$Prediction
plot(my_LoessSeries[10540:10840], type = "l")
plot(my_LoessSeries[10540:10840], type = "l")
my_Series = mySeries[4500:n]
my_Mat = cbind(my_Series,my_LoessSeries)
plot(my_Mat[10540:10840,], type = "l")
matplot(my_Mat[10540:10840,], type = "l")
x = 10000
step = 300
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 10000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 9000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = AugmentedNStep(my_LoessSeries[1:x],step,5)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[(x-100):(x+step),],type = "l")
my_LoessSeries[x]
my_LoessSeries[x+step]
aaa$Prediction
theData = cbind(1:100,2:101,3:102,4:103]
theData = cbind(1:100,2:101,3:102,4:103)
EventIndCol = c(2,3,4)
ExEventRet = theData[,-EventCol]
ExEventRet = theData[,-EventIndCol]
ExEventRet
1_Earnings= 1:100
Earnings_1= 1:100
1=T
1==T
0=T
0==T
0==F
apply?
?apply
?lapply
?apply
a = c(1,2)
b = c(1,1,2,2)
match(a,b)
aa = as.Date("2017-03-19","%Y-%m-%d")
aa
as.numeric(aa)
FilePath = 'C:/Users/Samuel/Documents/Book1.csv'
DataIn = read.csv(FilePath,header = F)
ShockMatrix.Raw = as.matrix(DataIn[,-1])
ShockMatrix.Raw
as.Date(DataIn[,1])
as.Date(DataIn[,1],'1970-1-1')
?as.Date
install.packages("libsvm")
load("C:/Users/Samuel/Downloads/.RData")
rm(list=ls())
Right = 'Put'
direction = 2*(Right == 'Put')-1
direction
source('~/Visual Studio 2013/Projects/ConsoleApplication5/R Codes/R_RequireFiles.R')
asset.1 = list(symbol = 'ORCL', Expiry = as.Date('2017-07-14'), Strike = 38.5,Right = 'PUT')
asset.2 = list(symbol = 'NKE', Expiry = as.Date('2017-06-23'), Strike = 48,Right = 'PUT')
asset.3 = list(symbol = 'TIF', Expiry = as.Date('2017-06-30'), Strike = 74,Right = 'PUT')
asset.4 = list(symbol = 'JNJ', Expiry = as.Date('2017-07-21'), Strike = 105,Right = 'PUT')
asset.5 = list(symbol = 'MMM', Expiry = as.Date('2017-07-21'), Strike = 165,Right = 'PUT')
asset.6 = list(symbol = 'MMM', Expiry = as.Date('2017-07-21'), Strike = 180,Right = 'PUT')
asset.7 = list(symbol = 'MCD', Expiry = as.Date('2017-07-21'), Strike = 130,Right = 'PUT')
asset.8 = list(symbol = 'TIF', Expiry = as.Date('2017-06-30'), Strike = 75,Right = 'PUT')
asset.9 = list(symbol = 'MMM', Expiry = as.Date('2017-06-30'), Strike = 175,Right = 'PUT')
asset.10 = list(symbol = 'MCD', Expiry = as.Date('2017-07-21'), Strike = 135,Right = 'PUT')
asset.11 = list(symbol = 'MCD', Expiry = as.Date('2017-08-18'), Strike = 130,Right = 'PUT')
asset.12 = list(symbol = 'DIS', Expiry = as.Date('2017-06-30'), Strike = 96,Right = 'PUT')
asset.13 = list(symbol = 'MCD', Expiry = as.Date('2017-08-18'), Strike = 135,Right = 'PUT')
asset.14 = list(symbol = 'T', Expiry = as.Date('2017-06-23'), Strike = 34.5,Right = 'PUT')
asset.15 = list(symbol = 'CPB', Expiry = as.Date('2017-07-21'), Strike = 52.5,Right = 'PUT')
asset.16 = list(symbol = 'DIS', Expiry = as.Date('2017-06-30'), Strike = 97.5,Right = 'PUT')
assets = lapply(1:16,function(x) return (get(paste0('asset.', x))))
source('~/dfkjdf/0.VolAnalysis/fh.R')
require("Rcpp")
require("shiny")
require("parallel")
require("multicool")
require("rugarch")
require("reshape2")
require("coda")
require("stochvol")
require("tsoutliers")
require("pracma")
require("VGAM")
require("MASS")
require("ExtDist")
require("survival")
require("Hmisc")
require("copula")
require("distr")
require("RQuantLib")
require("bizdays")
require("moments")
require("parallel")
require("foreach")
require("doParallel")
require("xts")
source('~/dfkjdf/0.VolAnalysis/fh.R')
