load_quantlib_calendars('UnitedStates/NYSE', from=min(Date_Original)-50, to='2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage,EventName)
{
return(sapply(List_EventDates[[EventName]],function(x) return(offset(x,stage,'QuantLib/UnitedStates/NYSE')%in%Date_Original[-1])))
}
List_ExistVector = lapply(EventType,function(x){
1==apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),WavelengthExistVector,x)),1,prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType,function(x) List_EventDates[[x]]=List_EventDates[[x]][List_ExistVector[[x]]==T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize,GrandDates,TargetDates)
{
ResultIndicator = rep(F,length(GrandDates))
ResultIndicator[pmax(match(TargetDates,GrandDates)+WaveSize,1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))
,1,function(y){ return (T%in%y)})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic),ncol = length(EventType)),1,
function(x){ return(T%in% x)})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x){
return(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))%*%(1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1]/Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,Sd_ExEvent)
##### 3. Return_Original_Detrend ######
Return_Original_DT = detrend(Return_Original)
##### 4. Return_ExEvent_Detrend ######
Return_ExEvent_DT = Return_Original_DT
Mean_ExEvent_DT =mean(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Sd_ExEvent_DT =sd(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Return_ExEvent_DT[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent_DT,Sd_ExEvent_DT)
}
{
Ret_ExEvent = as.ts(Return_ExEvent)
# Remove all additive outliers
tsoModel = tso(y = Ret_ExEvent,types = c("AO"),tsmethod = "auto.arima", args.tsmodel = list(model = "local-level"))
# Fit Garch with noise type of Max LL
noise = c("norm", "snorm", "std","sstd","ged","sged","nig","ghyp","jsu")
ARMA.Order = c(2,2)
GarchLL = function(noiseType, inputData)
{
spec = ugarchspec(mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),variance.model = list(model = "sGARCH"), distribution.model = noiseType)
fit = ugarchfit(spec, data = inputData, solver = "hybrid")
return(likelihood(fit))
}
GarchLL  = sapply(noise,GarchLL,tsoModel$yadj)
maxGarchLLIndex = which(GarchLL == max(GarchLL))
maxGarchSpec = ugarchspec(mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),variance.model = list(model = "sGARCH"), distribution.model =noise[maxGarchLLIndex])
maxGarchFit = ugarchfit(maxGarchSpec, data = tsoModel$yadj,solver = "hybrid")
# Fit stochastic Volatility Model
#dataDM = svsample(tsoModel$yadj)
#summary(dataDM,showlatent = F)
}
{
####### Prepare data to be fitted ###########
{
EventType_ToFit = EventType[-3]
dataTreatmentFunc = function(x) x^2
GetEventShocks = function(Identifier,Event)
{
return(Return_Original[List_EventIdentifier[[Event]][-1]==Identifier])
}
GetEventSeries = function(Event)
{
return(lapply((1:(WaveLen)),GetEventShocks,Event))
}
List_EventByIdentifier.Raw = lapply(EventType_ToFit,GetEventSeries)
names(List_EventByIdentifier.Raw) = EventType_ToFit
List_EventByIdentifier = lapply(EventType_ToFit,function(x){
nonZeroCol = (apply(matrix(unlist(List_EventByIdentifier.Raw[[x]]),ncol  = WaveLen),1,prod)!=0)
return(lapply(1:WaveLen,function(i){
return(List_EventByIdentifier.Raw[[x]][[i]][nonZeroCol])}))})
names(List_EventByIdentifier) = EventType_ToFit
}
####### Estimate distributions #####
{
####### Estimate Gamma distribution parameters by MLE #####
{
List_GammaObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(fitdistr(y, "gamma"))
})
})
names(List_GammaObj) = EventType_ToFit
gamma_ML = t(sapply(EventType_ToFit,function(x){
return(lapply(List_GammaObj[[x]],function(y) return(y$loglik)))
}))
}
####### Estimate Levy distribution parameters by MLE #####
{
List_LevyObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(vglm(y~1,levy(location = 0),maxit = 500))
})
})
names(List_LevyObj) = EventType_ToFit
Levy_ML = t(sapply(EventType_ToFit,function(x){
return(lapply(List_LevyObj[[x]],function(y) return(logLik.vlm(y))))
}))
}
####### Estimate Weibull distribution parameters by MLE #####
{
List_WeibullObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eWeibull(y))
})
})
names(List_WeibullObj) = EventType_ToFit
Weibull_ML = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lWeibull(y,param = eWeibull(y)))
})
}))
}
####### Estimate Beta distribution parameters by MLE #####
{
List_BetaObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eBeta(y))
})
})
names(List_BetaObj) = EventType_ToFit
Beta_LL = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lBeta(y,param = eBeta(y)))
})
}))
}
####### Estimate Laplace distribution parameters by MLE #####
{
List_LaplaceObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eLaplace(y))
})
})
names(List_LaplaceObj) = EventType_ToFit
Laplace_ML = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lLaplace(y,param = eLaplace(y)))
})
}))
}
####### Estimate Uniform distribution parameters by MLE #####
{
List_UniformObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eUniform(y))
})
})
names(List_UniformObj) = EventType_ToFit
Uniform_ML = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lUniform(y,param = eUniform(y)))
})
}))
}
}
####### Overlay Gamma distribution curve with data ########
{
overlayEventChart = function(EventName,day)
{
###### Prepare Data ######
d_plot = dataTreatmentFunc((List_EventByIdentifier[[EventName]][[day]]))
EventIndex = which(EventType == EventName)
DayIndex = day
###### Plot Data ######
hist(d_plot,breaks = 10, freq = F, xlab = "",
main = paste(EventName,"(Day",day,")"))
curve(dgamma(x,shape =  List_GammaObj[[EventName]][[day]]$estimate["shape"],
scale = 1/(List_GammaObj[[EventName]][[day]]$estimate["rate"])),
from = 0, to = max(d_plot),add = T)
}
# par(mfrow = c(length(EventType_ToFit),(WaveLen)),
#    oma = c(0,0,0,0), mar = c(3.1,4.1,2.1,1))
# sapply(EventType[-3],function(x) (sapply((1:(WaveLen)),
#                                         function(y) overlayEventChart(x,y))))
}
######## Correlation Analysis ####################
{
Cor_List = lapply(EventType_ToFit, function(x)
cor(t(matrix(unlist(GetEventSeries(x)),nrow = WaveLen))))
names(Cor_List) = EventType_ToFit
}
}
{
List_EventDates$XtremeOutliers = sort(c(Date_Original[-1][tsoModel$times],
List_EventDates$Xtreme))
List_EventDatesLogic$XtremeOutliers =
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),CreateIndicator,
Date_Original,List_EventDates$XtremeOutliers))
,1,function(y){ return (T%in%y)})
List_EventIdentifier$XtremeOutliers =
cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,
List_EventDates$XtremeOutliers))%*%(1:(WaveLen))
List_EventByIdentifier$XtremeOutliers = GetEventSeries("XtremeOutliers")
####### Estimate Uniform distribution on xtreme shocks parameters by MLE #####
{
List_UniformObj = eUniform(unlist(List_EventByIdentifier$XtremeOutliers)^2)
}
}
source('~/dfkjdf/VolAnalysis/fh.R')
setwd("~/dfkjdf/ADSK")
###################################################################
#    Set Parameters
###################################################################
{
BackwardWaveLen  = 0
ForwardWaveLen  = 1
WaveLen = BackwardWaveLen+ForwardWaveLen+1
}
###################################################################
#    Prepare Data Sets
###################################################################
{
Data_Prices = read.csv("Prices.csv",T)
Data_Dates = read.csv("Dates.csv",T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c("Earnings","FOMC","Xtreme"),mode = "list")
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date),"%m/%d/%Y")
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type==x]),"%m/%d/%Y")
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE', from=min(Date_Original)-50, to='2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage,EventName)
{
return(sapply(List_EventDates[[EventName]],function(x) return(offset(x,stage,'QuantLib/UnitedStates/NYSE')%in%Date_Original[-1])))
}
List_ExistVector = lapply(EventType,function(x){
1==apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),WavelengthExistVector,x)),1,prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType,function(x) List_EventDates[[x]]=List_EventDates[[x]][List_ExistVector[[x]]==T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize,GrandDates,TargetDates)
{
ResultIndicator = rep(F,length(GrandDates))
ResultIndicator[pmax(match(TargetDates,GrandDates)+WaveSize,1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))
,1,function(y){ return (T%in%y)})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic),ncol = length(EventType)),1,
function(x){ return(T%in% x)})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x){
return(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))%*%(1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1]/Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,Sd_ExEvent)
##### 3. Return_Original_Detrend ######
Return_Original_DT = detrend(Return_Original)
##### 4. Return_ExEvent_Detrend ######
Return_ExEvent_DT = Return_Original_DT
Mean_ExEvent_DT =mean(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Sd_ExEvent_DT =sd(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Return_ExEvent_DT[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent_DT,Sd_ExEvent_DT)
}
###################################################################
#    Fit Model to ExEvent Returns
###################################################################
{
Ret_ExEvent = as.ts(Return_ExEvent)
# Remove all additive outliers
tsoModel = tso(y = Ret_ExEvent,types = c("AO"),tsmethod = "auto.arima", args.tsmodel = list(model = "local-level"))
# Fit Garch with noise type of Max LL
noise = c("norm", "snorm", "std","sstd","ged","sged","nig","ghyp","jsu")
ARMA.Order = c(2,2)
GarchLL = function(noiseType, inputData)
{
spec = ugarchspec(mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),variance.model = list(model = "sGARCH"), distribution.model = noiseType)
fit = ugarchfit(spec, data = inputData, solver = "hybrid")
return(likelihood(fit))
}
GarchLL  = sapply(noise,GarchLL,tsoModel$yadj)
maxGarchLLIndex = which(GarchLL == max(GarchLL))
maxGarchSpec = ugarchspec(mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),variance.model = list(model = "sGARCH"), distribution.model =noise[maxGarchLLIndex])
maxGarchFit = ugarchfit(maxGarchSpec, data = tsoModel$yadj,solver = "hybrid")
# Fit stochastic Volatility Model
#dataDM = svsample(tsoModel$yadj)
#summary(dataDM,showlatent = F)
}
####### Prepare data to be fitted ###########
{
EventType_ToFit = EventType[-3]
dataTreatmentFunc = function(x) x^2
GetEventShocks = function(Identifier,Event)
{
return(Return_Original[List_EventIdentifier[[Event]][-1]==Identifier])
}
GetEventSeries = function(Event)
{
return(lapply((1:(WaveLen)),GetEventShocks,Event))
}
List_EventByIdentifier.Raw = lapply(EventType_ToFit,GetEventSeries)
names(List_EventByIdentifier.Raw) = EventType_ToFit
List_EventByIdentifier = lapply(EventType_ToFit,function(x){
nonZeroCol = (apply(matrix(unlist(List_EventByIdentifier.Raw[[x]]),ncol  = WaveLen),1,prod)!=0)
return(lapply(1:WaveLen,function(i){
return(List_EventByIdentifier.Raw[[x]][[i]][nonZeroCol])}))})
names(List_EventByIdentifier) = EventType_ToFit
}
####### Estimate distributions #####
{
####### Estimate Gamma distribution parameters by MLE #####
{
List_GammaObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(fitdistr(y, "gamma"))
})
})
names(List_GammaObj) = EventType_ToFit
gamma_ML = t(sapply(EventType_ToFit,function(x){
return(lapply(List_GammaObj[[x]],function(y) return(y$loglik)))
}))
}
####### Estimate Levy distribution parameters by MLE #####
{
List_LevyObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(vglm(y~1,levy(location = 0),maxit = 500))
})
})
names(List_LevyObj) = EventType_ToFit
Levy_ML = t(sapply(EventType_ToFit,function(x){
return(lapply(List_LevyObj[[x]],function(y) return(logLik.vlm(y))))
}))
}
####### Estimate Weibull distribution parameters by MLE #####
{
List_WeibullObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eWeibull(y))
})
})
names(List_WeibullObj) = EventType_ToFit
Weibull_ML = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lWeibull(y,param = eWeibull(y)))
})
}))
}
####### Estimate Beta distribution parameters by MLE #####
{
List_BetaObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eBeta(y))
})
})
names(List_BetaObj) = EventType_ToFit
Beta_LL = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lBeta(y,param = eBeta(y)))
})
}))
}
####### Estimate Laplace distribution parameters by MLE #####
{
List_LaplaceObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eLaplace(y))
})
})
names(List_LaplaceObj) = EventType_ToFit
Laplace_ML = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lLaplace(y,param = eLaplace(y)))
})
}))
}
####### Estimate Uniform distribution parameters by MLE #####
{
List_UniformObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eUniform(y))
})
})
names(List_UniformObj) = EventType_ToFit
Uniform_ML = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lUniform(y,param = eUniform(y)))
})
}))
}
}
####### Estimate Gamma distribution parameters by MLE #####
{
List_GammaObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(fitdistr(y, "gamma"))
})
})
names(List_GammaObj) = EventType_ToFit
gamma_ML = t(sapply(EventType_ToFit,function(x){
return(lapply(List_GammaObj[[x]],function(y) return(y$loglik)))
}))
}
####### Estimate Levy distribution parameters by MLE #####
{
List_LevyObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(vglm(y~1,levy(location = 0),maxit = 500))
})
})
names(List_LevyObj) = EventType_ToFit
Levy_ML = t(sapply(EventType_ToFit,function(x){
return(lapply(List_LevyObj[[x]],function(y) return(logLik.vlm(y))))
}))
}
List_EventByIdentifier
####### Estimate Weibull distribution parameters by MLE #####
{
List_WeibullObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eWeibull(y))
})
})
names(List_WeibullObj) = EventType_ToFit
Weibull_ML = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lWeibull(y,param = eWeibull(y)))
})
}))
}
####### Estimate Beta distribution parameters by MLE #####
{
List_BetaObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(eBeta(y))
})
})
names(List_BetaObj) = EventType_ToFit
Beta_LL = t(sapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(lBeta(y,param = eBeta(y)))
})
}))
}
####### Estimate Gamma distribution parameters by MLE #####
{
List_GammaObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(fitdistr(y, "gamma"))
})
})
names(List_GammaObj) = EventType_ToFit
gamma_ML = t(sapply(EventType_ToFit,function(x){
return(lapply(List_GammaObj[[x]],function(y) return(y$loglik)))
}))
}
gamma_ML
List_GammaObj
EventType_ToFit
dataTreatmentFunc
{
List_LevyObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(vglm(y~1,levy(location = 0),maxit = 500))
})
})
names(List_LevyObj) = EventType_ToFit
Levy_ML = t(sapply(EventType_ToFit,function(x){
return(lapply(List_LevyObj[[x]],function(y) return(logLik.vlm(y))))
}))
}
List_LevyObj = lapply(EventType_ToFit,function(x){
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(vglm(y~1,levy(location = 0),maxit = 500))
})
})
X = "Earnings"
lapply(lapply(List_EventByIdentifier[[x]],dataTreatmentFunc),function(y){
return(vglm(y~1,levy(location = 0),maxit = 500))
})
List_EventByIdentifier[[x]]
x = "Earnings"
List_EventByIdentifier[[x]]
source('~/dfkjdf/VolAnalysis/fh.R')
