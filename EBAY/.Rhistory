returnObj = list()
## Insert original time series
returnObj$Original = mySeries[myRange]
## Insert prediction
if (method == "Solid") {
returnObj$Prediction = sapply(myRange, function(x) SolidNStep(head(mySeries,x-step),step)$Prediction)
}else
{
returnObj$Prediction = sapply(myRange, function(x) AugmentedNStep(head(mySeries,x-step),step,degree))
}
## Insert error time series
returnObj$Error = returnObj$Original - returnObj$Prediction
## Calculate Variance
returnObj$TotalVariance = var(returnObj$Error)
return(returnObj)
}
################################################################################################
## Read and clean series
################################################################################################
data = read.table("C:/Users/Samuel/Downloads/test.txt",header = F,sep = ",")
N = nrow(data)
################################################################################################
## Detect abnormality
################################################################################################
## Detect Zeros
LargerThanZero = as.logical((data$V3>0)*(data$V4>0))
data = data[LargerThanZero,]
N = nrow(data)
## Detect outliers
bidReturn = log(data$V3[2:N]) - log(data$V3[1:(N-1)])
askReturn = log(data$V4[2:N]) - log(data$V4[1:(N-1)])
abnormReturnTH = .001
StayVector = c(T,as.logical(sapply(bidReturn, function(x) return(x< abnormReturnTH && x>(-abnormReturnTH)))
* sapply(askReturn, function(x) return(x<abnormReturnTH && x>(-abnormReturnTH)))))
data = data[StayVector,]
N = nrow(data)
################################################################################################
## Last mini-second vector
################################################################################################
mySeries = (data$V3+data$V4)/2
V1 = data$V1
TimeSeries = unique(V1)
names(TimeSeries) = "V1"
myDT = data.frame(V1,mySeries)
DTmy = myDT[N:1,]
mySeries = DTmy[match(TimeSeries,DTmy[,1]),2]
################################################################################################
## Construct Loess
################################################################################################
n = length(mySeries)
myLoessSeries = LastLoessFunction(mySeries,2000)
my_LoessSeries = myLoessSeries[4500:n]
aaa = SolidNStep(my_LoessSeries[1:10000],600)
names(aaa)
aaa$Prediction
aa = SolidNStep(my_LoessSeries[1:10000],60)
aa
names(aa)
aa$Prediction
my_LoessSeries[10060]
aa = SolidNStep(my_LoessSeries[1:10540],60)
aa$Prediction
my_LoessSeries[10600]
aa = SolidNStep(my_LoessSeries[1:10540],100)
aa$Prediction
my_LoessSeries[10640]
aa = SolidNStep(my_LoessSeries[1:10540],500)
aa = SolidNStep(my_LoessSeries[1:10540],300)
my_LoessSeries[10840]
aa$Prediction
plot(my_LoessSeries[10540:10840], type = "l")
plot(my_LoessSeries[10540:10840], type = "l")
my_Series = mySeries[4500:n]
my_Mat = cbind(my_Series,my_LoessSeries)
plot(my_Mat[10540:10840,], type = "l")
matplot(my_Mat[10540:10840,], type = "l")
x = 10000
step = 300
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 10000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 9000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = AugmentedNStep(my_LoessSeries[1:x],step,5)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[(x-100):(x+step),],type = "l")
my_LoessSeries[x]
my_LoessSeries[x+step]
aaa$Prediction
theData = cbind(1:100,2:101,3:102,4:103]
theData = cbind(1:100,2:101,3:102,4:103)
EventIndCol = c(2,3,4)
ExEventRet = theData[,-EventCol]
ExEventRet = theData[,-EventIndCol]
ExEventRet
1_Earnings= 1:100
Earnings_1= 1:100
1=T
1==T
0=T
0==T
0==F
apply?
?apply
?lapply
?apply
a = c(1,2)
b = c(1,1,2,2)
match(a,b)
aa = as.Date("2017-03-19","%Y-%m-%d")
aa
as.numeric(aa)
FilePath = 'C:/Users/Samuel/Documents/Book1.csv'
DataIn = read.csv(FilePath,header = F)
ShockMatrix.Raw = as.matrix(DataIn[,-1])
ShockMatrix.Raw
as.Date(DataIn[,1])
as.Date(DataIn[,1],'1970-1-1')
?as.Date
install.packages("libsvm")
load("C:/Users/Samuel/Downloads/.RData")
rm(list=ls())
Right = 'Put'
direction = 2*(Right == 'Put')-1
direction
source('~/Visual Studio 2013/Projects/ConsoleApplication5/R Codes/R_RequireFiles.R')
require("Rcpp")
require("shiny")
require("parallel")
require("multicool")
require("rugarch")
require("reshape2")
require("coda")
require("stochvol")
require("tsoutliers")
require("pracma")
require("VGAM")
require("MASS")
require("ExtDist")
require("survival")
require("Hmisc")
require("copula")
require("distr")
require("RQuantLib")
require("bizdays")
require("moments")
require("parallel")
require("foreach")
require("doParallel")
require("xts")
symbol = 'EBAY'
wd.Main = paste0("C:/Users/",Sys.getenv("USERNAME"),"/Dropbox/Share With Lenovo/VolAnalysis")
wd.sub = paste0('C:/Users/Samuel/Documents/dfkjdf/',symbol)
setwd(wd.sub)
###################################################################
#    Set Parameters
###################################################################
{
BackwardWaveLen  = 0
ForwardWaveLen  = 1
WaveLen = BackwardWaveLen+ForwardWaveLen+1
}
###################################################################
#    Prepare Data Sets
###################################################################
{
Data_Prices = read.csv("Prices.csv",T)
Data_Dates = read.csv("Dates.csv",T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c("Earnings","FOMC","Xtreme"),mode = "list")
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date),"%Y-%m-%d")
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type==x]),"%m/%d/%Y")
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE', from=min(Date_Original)-50, to='2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage,EventName)
{
return(sapply(List_EventDates[[EventName]],function(x) return(offset(x,stage,'QuantLib/UnitedStates/NYSE')%in%Date_Original[-1])))
}
List_ExistVector = lapply(EventType,function(x){
1==apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),WavelengthExistVector,x)),1,prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType,function(x) List_EventDates[[x]]=List_EventDates[[x]][List_ExistVector[[x]]==T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize,GrandDates,TargetDates)
{
ResultIndicator = rep(F,length(GrandDates))
ResultIndicator[pmax(match(TargetDates,GrandDates)+WaveSize,1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))
,1,function(y){ return (T%in%y)})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic),ncol = length(EventType)),1,
function(x){ return(T%in% x)})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x){
return(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))%*%(1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1]/Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,Sd_ExEvent)
##### 3. Return_Original_Detrend ######
Return_Original_DT = detrend(Return_Original)
##### 4. Return_ExEvent_Detrend ######
Return_ExEvent_DT = Return_Original_DT
Mean_ExEvent_DT =mean(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Sd_ExEvent_DT =sd(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Return_ExEvent_DT[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent_DT,Sd_ExEvent_DT)
}
###################################################################
#    Fit Model to ExEvent Returns
###################################################################
{
Ret_ExEvent = as.ts(Return_ExEvent)
# Remove all additive outliers
tsoModel = tso(y = Ret_ExEvent,types = c("AO"),tsmethod = "auto.arima", args.tsmodel = list(model = "local-level"))
# Fit Garch with noise type of Max LL
noise = c("norm", "snorm", "std","sstd","ged","sged","nig","ghyp","jsu")
ARMA.Order = c(2,2)
GarchLL = function(noiseType, inputData)
{
spec = ugarchspec(mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),variance.model = list(model = "sGARCH"), distribution.model = noiseType)
fit = ugarchfit(spec, data = inputData, solver = "hybrid")
return(likelihood(fit))
}
GarchLL  = sapply(noise,GarchLL,tsoModel$yadj)
maxGarchLLIndex = which(GarchLL == max(GarchLL))
maxGarchSpec = ugarchspec(mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),variance.model = list(model = "sGARCH"), distribution.model =noise[maxGarchLLIndex])
maxGarchFit = ugarchfit(maxGarchSpec, data = tsoModel$yadj,solver = "hybrid")
# Fit stochastic Volatility Model
#dataDM = svsample(tsoModel$yadj)
#summary(dataDM,showlatent = F)
}
maxGarchFit
sum(tsoModel$yadj)
sum(Ret_ExEvent)
head(Ret_ExEvent)
length(Ret_ExEvent)
sum(Return_Original)
Data_Prices = read.csv("Prices.csv",T)
Data_Dates = read.csv("Dates.csv",T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c("Earnings","FOMC","Xtreme"),mode = "list")
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date),"%Y-%m-%d")
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type==x]),"%m/%d/%Y")
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE', from=min(Date_Original)-50, to='2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage,EventName)
{
return(sapply(List_EventDates[[EventName]],function(x) return(offset(x,stage,'QuantLib/UnitedStates/NYSE')%in%Date_Original[-1])))
}
List_ExistVector = lapply(EventType,function(x){
1==apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),WavelengthExistVector,x)),1,prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType,function(x) List_EventDates[[x]]=List_EventDates[[x]][List_ExistVector[[x]]==T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize,GrandDates,TargetDates)
{
ResultIndicator = rep(F,length(GrandDates))
ResultIndicator[pmax(match(TargetDates,GrandDates)+WaveSize,1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))
,1,function(y){ return (T%in%y)})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic),ncol = length(EventType)),1,
function(x){ return(T%in% x)})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x){
return(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))%*%(1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1]/Prices_Original[-N])
sum(Return_Original)
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,Sd_ExEvent)
sum(Return_ExEvent)
Mean_ExEvent
Sd_ExEvent
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,Sd_ExEvent)
sum(Return_ExEvent)
sum(AllEventsLogic[-1] == T)
{
#   install.packages("Rcpp")
#   install.packages("multicool")
#   install.packages("rugarch")
#   install.packages("coda")
#   install.packages("stochvol")
#   install.packages("shiny")
#   install.packages("tsoutliers")
#   install.packages("pracma")
#   install.packages("VGAM")
#   install.packages("MASS")
#   install.packages("ExtDist")
#   install.packages("survival")
#   install.packages("Hmisc")
#   install.packages("copula")
#   install.packages("distr")
#   {
#    install.packages("drat")
#    drat::addRepo("ghrr")
#    install.packages("RQuantLib", type="binary")
#   }
#   install.packages("bizdays")
#
#   install.packages("moments")
#   install.packages("snow")
# install.packages("parallel")
# install.packages("foreach")
# install.packages("doParallel")
# install.packages("xts")
# require("Rcpp")
# require("shiny")
# require("parallel")
# require("multicool")
# require("rugarch")
# require("reshape2")
# require("coda")
# require("stochvol")
# require("tsoutliers")
# require("pracma")
# require("VGAM")
# require("MASS")
# require("ExtDist")
# require("survival")
# require("Hmisc")
# require("copula")
# require("distr")
# require("RQuantLib")
# require("bizdays")
# require("moments")
# require("parallel")
# require("foreach")
# require("doParallel")
# require("xts")
# setwd("C:/VolAnalysis")
# symbol = 'EBAY'
# wd.Main = paste0("C:/Users/",Sys.getenv("USERNAME"),"/Dropbox/Share With Lenovo/VolAnalysis")
# wd.sub = paste0('C:/Users/Samuel/Documents/dfkjdf/',symbol)
# setwd(wd.sub)
}
###################################################################
#    Set Parameters
###################################################################
{
BackwardWaveLen  = 0
ForwardWaveLen  = 1
WaveLen = BackwardWaveLen+ForwardWaveLen+1
}
###################################################################
#    Prepare Data Sets
###################################################################
{
Data_Prices = read.csv("Prices.csv",T)
Data_Dates = read.csv("Dates.csv",T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c("Earnings","FOMC","Xtreme"),mode = "list")
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date),"%Y-%m-%d")
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type==x]),"%m/%d/%Y")
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE', from=min(Date_Original)-50, to='2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage,EventName)
{
return(sapply(List_EventDates[[EventName]],function(x) return(offset(x,stage,'QuantLib/UnitedStates/NYSE')%in%Date_Original[-1])))
}
List_ExistVector = lapply(EventType,function(x){
1==apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),WavelengthExistVector,x)),1,prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType,function(x) List_EventDates[[x]]=List_EventDates[[x]][List_ExistVector[[x]]==T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize,GrandDates,TargetDates)
{
ResultIndicator = rep(F,length(GrandDates))
ResultIndicator[pmax(match(TargetDates,GrandDates)+WaveSize,1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))
,1,function(y){ return (T%in%y)})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic),ncol = length(EventType)),1,
function(x){ return(T%in% x)})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x){
return(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))%*%(1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1]/Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,0) #Sd_ExEvent)
##### 3. Return_Original_Detrend ######
Return_Original_DT = detrend(Return_Original)
##### 4. Return_ExEvent_Detrend ######
Return_ExEvent_DT = Return_Original_DT
Mean_ExEvent_DT =mean(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Sd_ExEvent_DT =sd(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Return_ExEvent_DT[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent_DT,Sd_ExEvent_DT)
}
###################################################################
#    Fit Model to ExEvent Returns
###################################################################
{
Ret_ExEvent = as.ts(Return_ExEvent)
# Remove all additive outliers
tsoModel = tso(
y = Ret_ExEvent,
types = c("AO"),
tsmethod = "auto.arima",
args.tsmodel = list(model = "local-level")
)
# Fit Garch with noise type of Max LL
noise = c("norm", "snorm", "std","sstd","ged","sged","nig","ghyp","jsu")
ARMA.Order = c(2,2)
GarchLL = function(noiseType, inputData)
{
spec = ugarchspec(mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),variance.model = list(model = "sGARCH"), distribution.model = noiseType)
fit = ugarchfit(spec, data = inputData, solver = "hybrid")
return(likelihood(fit))
}
GarchLL  = sapply(noise,GarchLL,tsoModel$yadj)
maxGarchLLIndex = which(GarchLL == max(GarchLL))
maxGarchSpec = ugarchspec(mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),variance.model = list(model = "sGARCH"), distribution.model =noise[maxGarchLLIndex])
maxGarchFit = ugarchfit(maxGarchSpec, data = tsoModel$yadj,solver = "hybrid")
# Fit stochastic Volatility Model
#dataDM = svsample(tsoModel$yadj)
#summary(dataDM,showlatent = F)
}
maxGarchFit
