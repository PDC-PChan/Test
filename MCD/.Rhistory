yt = matrix(ts.target,nrow=1))
FKF.att = FKF.Fitted$att
# Set up return object
returnObj$theta = fit$par
returnObj$sp = sp.Fitted
returnObj$FKF = FKF.Fitted
returnObj$Prediction = (sp.Fitted$Tt %*% FKF.att[,ncol(FKF.att)])[1,1]
return (returnObj)
}
}
################################################################################################
## Augmented N Step Prediction Function
################################################################################################
{
AugmentedNStep = function(mySeries, step, degree)
{
N = length(mySeries)
return (mean(sapply(0:degree, function(i) (SolidNStep(head(mySeries,(N-i)),step+i))$Prediction)))
}
}
KCA.Backtest = function(mySeries, myRange, step, method = "Solid", degree = 10)
{
## Create empty return object
returnObj = list()
## Insert original time series
returnObj$Original = mySeries[myRange]
## Insert prediction
if (method == "Solid") {
returnObj$Prediction = sapply(myRange, function(x) SolidNStep(head(mySeries,x-step),step)$Prediction)
}else
{
returnObj$Prediction = sapply(myRange, function(x) AugmentedNStep(head(mySeries,x-step),step,degree))
}
## Insert error time series
returnObj$Error = returnObj$Original - returnObj$Prediction
## Calculate Variance
returnObj$TotalVariance = var(returnObj$Error)
return(returnObj)
}
################################################################################################
## Read and clean series
################################################################################################
data = read.table("C:/Users/Samuel/Downloads/test.txt",header = F,sep = ",")
N = nrow(data)
################################################################################################
## Detect abnormality
################################################################################################
## Detect Zeros
LargerThanZero = as.logical((data$V3>0)*(data$V4>0))
data = data[LargerThanZero,]
N = nrow(data)
## Detect outliers
bidReturn = log(data$V3[2:N]) - log(data$V3[1:(N-1)])
askReturn = log(data$V4[2:N]) - log(data$V4[1:(N-1)])
abnormReturnTH = .001
StayVector = c(T,as.logical(sapply(bidReturn, function(x) return(x< abnormReturnTH && x>(-abnormReturnTH)))
* sapply(askReturn, function(x) return(x<abnormReturnTH && x>(-abnormReturnTH)))))
data = data[StayVector,]
N = nrow(data)
################################################################################################
## Last mini-second vector
################################################################################################
mySeries = (data$V3+data$V4)/2
V1 = data$V1
TimeSeries = unique(V1)
names(TimeSeries) = "V1"
myDT = data.frame(V1,mySeries)
DTmy = myDT[N:1,]
mySeries = DTmy[match(TimeSeries,DTmy[,1]),2]
################################################################################################
## Construct Loess
################################################################################################
n = length(mySeries)
myLoessSeries = LastLoessFunction(mySeries,2000)
my_LoessSeries = myLoessSeries[4500:n]
aaa = SolidNStep(my_LoessSeries[1:10000],600)
names(aaa)
aaa$Prediction
aa = SolidNStep(my_LoessSeries[1:10000],60)
aa
names(aa)
aa$Prediction
my_LoessSeries[10060]
aa = SolidNStep(my_LoessSeries[1:10540],60)
aa$Prediction
my_LoessSeries[10600]
aa = SolidNStep(my_LoessSeries[1:10540],100)
aa$Prediction
my_LoessSeries[10640]
aa = SolidNStep(my_LoessSeries[1:10540],500)
aa = SolidNStep(my_LoessSeries[1:10540],300)
my_LoessSeries[10840]
aa$Prediction
plot(my_LoessSeries[10540:10840], type = "l")
plot(my_LoessSeries[10540:10840], type = "l")
my_Series = mySeries[4500:n]
my_Mat = cbind(my_Series,my_LoessSeries)
plot(my_Mat[10540:10840,], type = "l")
matplot(my_Mat[10540:10840,], type = "l")
x = 10000
step = 300
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 10000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 9000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa$Prediction
x = 11000
step = 100
aaa = AugmentedNStep(my_LoessSeries[1:x],step,5)
matplot(my_Mat[x:(x+step),],type = "l")
my_LoessSeries[x+step]
aaa
x = 11000
step = 100
aaa = SolidNStep(my_LoessSeries[1:x],step)
matplot(my_Mat[(x-100):(x+step),],type = "l")
my_LoessSeries[x]
my_LoessSeries[x+step]
aaa$Prediction
theData = cbind(1:100,2:101,3:102,4:103]
theData = cbind(1:100,2:101,3:102,4:103)
EventIndCol = c(2,3,4)
ExEventRet = theData[,-EventCol]
ExEventRet = theData[,-EventIndCol]
ExEventRet
1_Earnings= 1:100
Earnings_1= 1:100
1=T
1==T
0=T
0==T
0==F
apply?
?apply
?lapply
?apply
a = c(1,2)
b = c(1,1,2,2)
match(a,b)
aa = as.Date("2017-03-19","%Y-%m-%d")
aa
as.numeric(aa)
FilePath = 'C:/Users/Samuel/Documents/Book1.csv'
DataIn = read.csv(FilePath,header = F)
ShockMatrix.Raw = as.matrix(DataIn[,-1])
ShockMatrix.Raw
as.Date(DataIn[,1])
as.Date(DataIn[,1],'1970-1-1')
?as.Date
install.packages("libsvm")
load("C:/Users/Samuel/Downloads/.RData")
rm(list=ls())
Right = 'Put'
direction = 2*(Right == 'Put')-1
direction
source('~/Visual Studio 2013/Projects/ConsoleApplication5/R Codes/R_RequireFiles.R')
asset.1 = list(symbol = 'ORCL', Expiry = as.Date('2017-07-14'), Strike = 38.5,Right = 'PUT')
asset.2 = list(symbol = 'NKE', Expiry = as.Date('2017-06-23'), Strike = 48,Right = 'PUT')
asset.3 = list(symbol = 'TIF', Expiry = as.Date('2017-06-30'), Strike = 74,Right = 'PUT')
asset.4 = list(symbol = 'JNJ', Expiry = as.Date('2017-07-21'), Strike = 105,Right = 'PUT')
asset.5 = list(symbol = 'MMM', Expiry = as.Date('2017-07-21'), Strike = 165,Right = 'PUT')
asset.6 = list(symbol = 'MMM', Expiry = as.Date('2017-07-21'), Strike = 180,Right = 'PUT')
asset.7 = list(symbol = 'MCD', Expiry = as.Date('2017-07-21'), Strike = 130,Right = 'PUT')
asset.8 = list(symbol = 'TIF', Expiry = as.Date('2017-06-30'), Strike = 75,Right = 'PUT')
asset.9 = list(symbol = 'MMM', Expiry = as.Date('2017-06-30'), Strike = 175,Right = 'PUT')
asset.10 = list(symbol = 'MCD', Expiry = as.Date('2017-07-21'), Strike = 135,Right = 'PUT')
asset.11 = list(symbol = 'MCD', Expiry = as.Date('2017-08-18'), Strike = 130,Right = 'PUT')
asset.12 = list(symbol = 'DIS', Expiry = as.Date('2017-06-30'), Strike = 96,Right = 'PUT')
asset.13 = list(symbol = 'MCD', Expiry = as.Date('2017-08-18'), Strike = 135,Right = 'PUT')
asset.14 = list(symbol = 'T', Expiry = as.Date('2017-06-23'), Strike = 34.5,Right = 'PUT')
asset.15 = list(symbol = 'CPB', Expiry = as.Date('2017-07-21'), Strike = 52.5,Right = 'PUT')
asset.16 = list(symbol = 'DIS', Expiry = as.Date('2017-06-30'), Strike = 97.5,Right = 'PUT')
assets = lapply(1:16,function(x) return (get(paste0('asset.', x))))
216800
asset.1 = list(symbol = 'DIS', Expiry = as.Date('2017-07-28'), Strike = 96,Right = 'PUT')
asset.2 = list(symbol = 'T', Expiry = as.Date('2017-08-04'), Strike = 31,Right = 'PUT')
asset.3 = list(symbol = 'IBM', Expiry = as.Date('2017-08-18'), Strike = 130,Right = 'PUT')
asset.4 = list(symbol = 'DIS', Expiry = as.Date('2017-07-28'), Strike = 96.5,Right = 'PUT')
asset.5 = list(symbol = 'MCD', Expiry = as.Date('2017-09-15'), Strike = 135,Right = 'PUT')
asset.6 = list(symbol = 'MMM', Expiry = as.Date('2017-08-18'), Strike = 185,Right = 'PUT')
asset.7 = list(symbol = 'MCD', Expiry = as.Date('2017-08-18'), Strike = 130,Right = 'PUT')
asset.8 = list(symbol = 'DIS', Expiry = as.Date('2017-08-18'), Strike = 90,Right = 'PUT')
asset.9 = list(symbol = 'MCD', Expiry = as.Date('2017-08-18'), Strike = 135,Right = 'PUT')
asset.10 = list(symbol = 'EBAY', Expiry = as.Date('2017-09-15'), Strike = 29,Right = 'PUT')
asset.11 = list(symbol = 'ORCL', Expiry = as.Date('2017-09-15'), Strike = 45,Right = 'PUT')
asset.12 = list(symbol = 'MCD', Expiry = as.Date('2017-08-25'), Strike = 139,Right = 'PUT')
asset.13 = list(symbol = 'ORCL', Expiry = as.Date('2017-09-15'), Strike = 44,Right = 'PUT')
asset.14 = list(symbol = 'MCD', Expiry = as.Date('2017-08-25'), Strike = 138,Right = 'PUT')
asset.15 = list(symbol = 'MMM', Expiry = as.Date('2017-09-15'), Strike = 185,Right = 'PUT')
asset.16 = list(symbol = 'MCD', Expiry = as.Date('2017-08-04'), Strike = 143,Right = 'PUT')
asset.17 = list(symbol = 'ADSK', Expiry = as.Date('2017-10-20'), Strike = 70,Right = 'PUT')
asset.18 = list(symbol = 'MCD', Expiry = as.Date('2017-09-01'), Strike = 138,Right = 'PUT')
asset.19 = list(symbol = 'PG', Expiry = as.Date('2017-10-20'), Strike = 75,Right = 'PUT')
asset.20 = list(symbol = 'TIF', Expiry = as.Date('2017-08-18'), Strike = 77.5,Right = 'PUT')
asset.21 = list(symbol = 'MCD', Expiry = as.Date('2017-07-28'), Strike = 145,Right = 'PUT')
assets = lapply(1:21,function(x) return (get(paste0('asset.', x))))
require('Rcpp')
require('shiny')
require('parallel')
require('multicool')
require('rugarch')
require('reshape2')
require('coda')
require('stochvol')
require('tsoutliers')
require('pracma')
require('VGAM')
require('MASS')
require('ExtDist')
require('survival')
require('Hmisc')
require('copula')
require('distr')
require('RQuantLib')
require('bizdays')
require('moments')
require('parallel')
require('foreach')
require('doParallel')
require('xts')
require('rmgarch')
require('DEoptim')
Parent.WD = 'C:/Users/Samuel/Documents/dfkjdf/'
SymbolList = unique(sapply(assets,function(x) return(x[['symbol']])))
{
BackwardWaveLen  = 0
ForwardWaveLen  = 1
WaveLen = BackwardWaveLen + ForwardWaveLen + 1
}
{
Get.Clean.DatePrice = function(wd) {
####### Read in data  #############
setwd(wd)
Data_Prices = read.csv('Prices.csv', T)
Data_Dates = read.csv('Dates.csv', T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c('Earnings', 'FOMC', 'Xtreme'), mode = 'list')
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date), '%Y-%m-%d')
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type == x]), '%m/%d/%Y')
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE',
from = min(Date_Original) - 50,
to = '2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage, EventName)
{
return(sapply(List_EventDates[[EventName]], function(x)
return(
offset(x, stage, 'QuantLib/UnitedStates/NYSE') %in% Date_Original[-1]
)))
}
List_ExistVector = lapply(EventType, function(x) {
1 == apply(cbind(sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
WavelengthExistVector,
x
)), 1, prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType, function(x)
List_EventDates[[x]] = List_EventDates[[x]][List_ExistVector[[x]] == T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize, GrandDates, TargetDates)
{
ResultIndicator = rep(F, length(GrandDates))
ResultIndicator[pmax(match(TargetDates, GrandDates) + WaveSize, 1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
)
, 1, function(y) {
return (T %in% y)
})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic), ncol = length(EventType)), 1,
function(x) {
return(T %in% x)
})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x) {
return(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
) %*% (1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1] / Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent = mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent = sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1] ==
T)), Mean_ExEvent, 0) #Sd_ExEvent)
return(list(Date = Date_Original[-1], Return = as.ts(Return_ExEvent)))
}
DatePrices = lapply(paste0(Parent.WD, SymbolList), Get.Clean.DatePrice)
names(DatePrices) = SymbolList
########### Consolidate Date ###########
Date.Raw = unique(as.numeric(unlist(sapply(SymbolList, function(x) {
return(DatePrices[[x]]$Date)
}))))
Date.Final = as.Date(Date.Raw[order(Date.Raw)])
########### Consolidate Prices ###########
Return.Final = lapply(lapply(SymbolList, function(x) {
return(DatePrices[[x]]$Return[match(Date.Final, DatePrices[[x]]$Date)])
}), na.locf)
Final.DF = data.frame(matrix(
unlist(Return.Final),
byrow = F,
ncol = length(SymbolList)
))
names(Final.DF) = SymbolList
Final.DF$Date = Date.Final
}
{
noise = c('norm',
'snorm',
'std',
'sstd',
'ged',
'sged',
'nig',
'ghyp',
'jsu')
ARMA.Order = c(3, 2)
GetMaxLLSpec = function(symbol) {
Ret_ExEvent = as.ts(Final.DF[symbol])
# Remove all additive outliers
tsoModel = tso(
y = Ret_ExEvent,
types = c('AO'),
tsmethod = 'auto.arima',
args.tsmodel = list(model = 'local-level')
)
# Fit Garch with noise type of Max LL
GarchLL = function(noiseType, inputData)
{
spec = ugarchspec(
mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),
variance.model = list(model = 'sGARCH'),
distribution.model = noiseType
)
fit = ugarchfit(spec, data = inputData, solver = 'hybrid')
return(likelihood(fit))
}
GarchLL  = sapply(noise, GarchLL, tsoModel$yadj)
maxGarchLLIndex = which(GarchLL == max(GarchLL))
maxGarchSpec = ugarchspec(
mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),
variance.model = list(model = 'sGARCH'),
distribution.model = noise[maxGarchLLIndex]
)
maxGarchFit = ugarchfit(maxGarchSpec, data = tsoModel$yadj, solver = 'hybrid')
return(list(Fit = maxGarchFit, Spec = maxGarchSpec))
# return( list(Spec =maxGarchSpec ))
}
}
####### Simulation Initialization #############
{
NPaths = 10000
SimulationEndDate = preceding(as.Date("2017-12-31", "%Y-%m-%d"),
'QuantLib/UnitedStates/NYSE')
SimulationStartDate = adjust("UnitedStates/NYSE", max(Final.DF$Date, 1) +
1)
NumOfDays = bizdays(SimulationStartDate,
SimulationEndDate,
'QuantLib/UnitedStates/NYSE') + 1
Date_Future = bizseq(SimulationStartDate,SimulationEndDate,'QuantLib/UnitedStates/NYSE')
}
####### Read in Shock Matricess  #############
{
Read.ShockMatrix = function(futureDates, FilePath){
DataIn = read.csv(FilePath,header = F)
Date.Index = match(futureDates,as.Date(DataIn[,1],'1970-01-01'))
return(as.matrix(DataIn[,-1])[Date.Index,])
}
List.ShockMatrices = lapply(paste0(Parent.WD, SymbolList, '/ShockMatrix.csv'), function(fileAdd) {
return(Read.ShockMatrix(Date_Future, fileAdd))
})
names(List.ShockMatrices) = SymbolList
}
Simmed.Path.List = list()
no_cores <<- detectCores()-1
cl <<- makeCluster(no_cores)
shutUp = clusterExport(cl,ls(.GlobalEnv))
clusterEvalQ(cl, library(tsoutliers))
clusterEvalQ(cl, library(rugarch))
Simmed.Path.List = parLapply(cl,SymbolList,function(x){
maxGarchFit = GetMaxLLSpec(x)$Fit
garchModel = ugarchsim(maxGarchFit,n.sim = NumOfDays,m.sim = NPaths,
startMethod =  "sample")
return(fitted(garchModel))
})
stopCluster(cl)
names(Simmed.Path.List) = SymbolList
for(i in (1:length(SymbolList))){
symbol = SymbolList[i]
Simmed.Path.List[[symbol]][List.ShockMatrices[[symbol]][,1]!=0,] = 0
Simmed.Path.List[[symbol]] = Simmed.Path.List[[symbol]] + List.ShockMatrices[[symbol]]
}
rm(List.ShockMatrices)
gc()
{
Calculate_Fitted.Expiry.Prices = function(symbol,ExpiryDate)
{
####### Read in data  #############
setwd(paste0(Parent.WD,'/',symbol ))
Data_Prices = read.csv('Prices.csv', T)
LastClose = Data_Prices$Close[as.Date(Data_Prices$Date,'%Y-%m-%d') == max(Final.DF$Date)]
MaturityLength = bizdays(SimulationStartDate, ExpiryDate, 'QuantLib/UnitedStates/NYSE')+1
Fitted.Expiry.Returns = apply(Simmed.Path.List[[symbol]],2,function(x){
prod(exp(head(x,MaturityLength)))
})
return(LastClose*Fitted.Expiry.Returns)
}
GetLastClose = function(symbol)
{
setwd(paste0(Parent.WD,'/',symbol ))
Data_Prices = read.csv('Prices.csv', T)
LastClose = Data_Prices$Close[as.Date(Data_Prices$Date,'%Y-%m-%d') == max(Final.DF$Date)]
return(LastClose)
}
GetCloseChange = function(symbol)
{
setwd(paste0(Parent.WD,'/',symbol ))
Data_Prices = read.csv('Prices.csv', T)
LastClose = Data_Prices$Close[as.Date(Data_Prices$Date,'%Y-%m-%d') == max(Final.DF$Date)]
N = length(Data_Prices$Close)
secondLast.Date = sort(Final.DF$Date)[N-2]
secondLast = Data_Prices$Close[as.Date(Data_Prices$Date,'%Y-%m-%d') == secondLast.Date]
return(log(LastClose)-log(secondLast))
}
payoff = function(ST,K,Premium,Right = 'PUT'){
direction = 2*(Right == 'PUT')-1
return(Premium - max(direction*(K-ST),0))
}
Probability.OTM = function(K,Sim.Prices, Right = 'PUT'){
direction = 2*(Right == 'PUT')-1
return(sum(direction*(Sim.Prices-K) > 0)/NPaths)
}
Cond.Loss = function(K,Sim.Prices, Right = 'PUT'){
direction = 2*(Right == 'PUT')-1
conLoss = mean(direction*(K-Sim.Prices[(direction*(K-Sim.Prices))>0]))
if(is.na(conLoss)) conLoss = 0
return(conLoss)
}
ExReturn = function(K,Sim.Prices,Premium,Right = 'PUT'){
return(mean(sapply(Sim.Prices,payoff,K,Premium,Right)))
}
SDReturn = function(K,Sim.Prices,Premium,Right = 'PUT'){
return(sd(sapply(Sim.Prices,payoff,K,Premium,Right)))
}
}
{
Prob.OTM = sapply(assets,function(asset){
Sim.Prices = Calculate_Fitted.Expiry.Prices(asset$symbol,asset$Expiry)
return(Probability.OTM(K = asset$Strike,Sim.Prices=Sim.Prices,Right = asset$Right))
})
Ex.Payoff = sapply(assets,function(asset){
Sim.Prices = Calculate_Fitted.Expiry.Prices(asset$symbol,asset$Expiry)
return(ExReturn(K = asset$Strike,Sim.Prices=Sim.Prices,Premium = asset$Premium,Right = asset$Right))
})
Last.Closes = sapply(assets,function(asset){
return(GetLastClose(asset$symbol))
})
Last.Change = sapply(assets,function(asset){
return(GetCloseChange(asset$symbol))
})
}
