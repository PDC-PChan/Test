###################################################################
#    Prepare Libraries
###################################################################
{
#   install.packages("Rcpp")
#   install.packages("multicool")
#   install.packages("rugarch")
#   install.packages("coda")
#   install.packages("stochvol")
#   install.packages("shiny")
#   install.packages("tsoutliers")
#   install.packages("pracma")
#   install.packages("VGAM")
#   install.packages("MASS")
#   install.packages("ExtDist")
#   install.packages("survival")
#   install.packages("Hmisc")
#   install.packages("copula")
#   install.packages("distr")
#   {
#    install.packages("drat")
#    drat::addRepo("ghrr")
#    install.packages("RQuantLib", type="binary")
#   }
#   install.packages("bizdays")
#
#   install.packages("moments")
#   install.packages("snow")
# install.packages("parallel")
# install.packages("foreach")
# install.packages("doParallel")
# install.packages("xts")
# install.packages('PearsonDS')
require("Rcpp")
require("shiny")
require("parallel")
require("multicool")
require("rugarch")
require("reshape2")
require("coda")
require("stochvol")
require("tsoutliers")
require("pracma")
require("VGAM")
require("MASS")
require("ExtDist")
require("survival")
require("Hmisc")
require("copula")
require("distr")
require("RQuantLib")
require("bizdays")
require("moments")
require("parallel")
require("foreach")
require("doParallel")
require("xts")
require('PearsonDS')
#symbol = 'XAU'
#wd.sub = paste0('C:/Users/Samuel/Documents/dfkjdf/',symbol)
#setwd(wd.sub)
}
setwd(C:/Users/chan/Documents/dfkjdf/ORCL)
setwd('C:/Users/chan/Documents/dfkjdf/ORCL')
###################################################################
#    Set Parameters
###################################################################
{
BackwardWaveLen  = 0
ForwardWaveLen  = 1
WaveLen = BackwardWaveLen+ForwardWaveLen+1
}
###################################################################
#    Prepare Data Sets
###################################################################
{
Data_Prices = read.csv("Prices.csv",T)
Data_Dates = read.csv("Dates.csv",T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c("Earnings","FOMC","Xtreme"),mode = "list")
#EventType = as.vector(c("FOMC","Xtreme"),mode = "list")
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date),"%Y-%m-%d")
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type==x]),"%m/%d/%Y")
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE', from=min(Date_Original)-50, to='2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage,EventName)
{
return(sapply(List_EventDates[[EventName]],function(x) return(offset(x,stage,'QuantLib/UnitedStates/NYSE')%in%Date_Original[-1])))
}
List_ExistVector = lapply(EventType,function(x){
1==apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),WavelengthExistVector,x)),1,prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType,function(x) List_EventDates[[x]]=List_EventDates[[x]][List_ExistVector[[x]]==T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize,GrandDates,TargetDates)
{
ResultIndicator = rep(F,length(GrandDates))
ResultIndicator[pmax(match(TargetDates,GrandDates)+WaveSize,1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))
,1,function(y){ return (T%in%y)})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic),ncol = length(EventType)),1,
function(x){ return(T%in% x)})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x){
return(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))%*%(1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1]/Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,0) #Sd_ExEvent)
##### 3. Return_Original_Detrend ######
Return_Original_DT = detrend(Return_Original)
##### 4. Return_ExEvent_Detrend ######
Return_ExEvent_DT = Return_Original_DT
Mean_ExEvent_DT =mean(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Sd_ExEvent_DT =sd(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Return_ExEvent_DT[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent_DT,Sd_ExEvent_DT)
}
{
install.packages("drat")
drat::addRepo("ghrr")
install.packages("RQuantLib", type="binary")
}
###################################################################
#    Prepare Data Sets
###################################################################
{
Data_Prices = read.csv("Prices.csv",T)
Data_Dates = read.csv("Dates.csv",T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c("Earnings","FOMC","Xtreme"),mode = "list")
#EventType = as.vector(c("FOMC","Xtreme"),mode = "list")
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date),"%Y-%m-%d")
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type==x]),"%m/%d/%Y")
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE', from=min(Date_Original)-50, to='2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage,EventName)
{
return(sapply(List_EventDates[[EventName]],function(x) return(offset(x,stage,'QuantLib/UnitedStates/NYSE')%in%Date_Original[-1])))
}
List_ExistVector = lapply(EventType,function(x){
1==apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),WavelengthExistVector,x)),1,prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType,function(x) List_EventDates[[x]]=List_EventDates[[x]][List_ExistVector[[x]]==T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize,GrandDates,TargetDates)
{
ResultIndicator = rep(F,length(GrandDates))
ResultIndicator[pmax(match(TargetDates,GrandDates)+WaveSize,1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))
,1,function(y){ return (T%in%y)})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic),ncol = length(EventType)),1,
function(x){ return(T%in% x)})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x){
return(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))%*%(1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1]/Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,0) #Sd_ExEvent)
##### 3. Return_Original_Detrend ######
Return_Original_DT = detrend(Return_Original)
##### 4. Return_ExEvent_Detrend ######
Return_ExEvent_DT = Return_Original_DT
Mean_ExEvent_DT =mean(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Sd_ExEvent_DT =sd(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Return_ExEvent_DT[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent_DT,Sd_ExEvent_DT)
}
require("RQuantLib")
###################################################################
#    Prepare Data Sets
###################################################################
{
Data_Prices = read.csv("Prices.csv",T)
Data_Dates = read.csv("Dates.csv",T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c("Earnings","FOMC","Xtreme"),mode = "list")
#EventType = as.vector(c("FOMC","Xtreme"),mode = "list")
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date),"%Y-%m-%d")
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type==x]),"%m/%d/%Y")
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE', from=min(Date_Original)-50, to='2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage,EventName)
{
return(sapply(List_EventDates[[EventName]],function(x) return(offset(x,stage,'QuantLib/UnitedStates/NYSE')%in%Date_Original[-1])))
}
List_ExistVector = lapply(EventType,function(x){
1==apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),WavelengthExistVector,x)),1,prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType,function(x) List_EventDates[[x]]=List_EventDates[[x]][List_ExistVector[[x]]==T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize,GrandDates,TargetDates)
{
ResultIndicator = rep(F,length(GrandDates))
ResultIndicator[pmax(match(TargetDates,GrandDates)+WaveSize,1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))
,1,function(y){ return (T%in%y)})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic),ncol = length(EventType)),1,
function(x){ return(T%in% x)})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x){
return(cbind(sapply(seq(-BackwardWaveLen,ForwardWaveLen),
CreateIndicator,Date_Original,List_EventDates[[x]]))%*%(1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1]/Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent =mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent =sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent,0) #Sd_ExEvent)
##### 3. Return_Original_Detrend ######
Return_Original_DT = detrend(Return_Original)
##### 4. Return_ExEvent_Detrend ######
Return_ExEvent_DT = Return_Original_DT
Mean_ExEvent_DT =mean(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Sd_ExEvent_DT =sd(Return_ExEvent_DT[AllEventsLogic[-1] == F])
Return_ExEvent_DT[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1]==T)),Mean_ExEvent_DT,Sd_ExEvent_DT)
}
