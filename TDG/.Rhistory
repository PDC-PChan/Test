# install.packages('bizdays')
#
# install.packages('moments')
# install.packages('snow')
# install.packages('parallel')
# install.packages('foreach')
# install.packages('doParallel')
# install.packages('xts')
# install.packages('rmgarch')
require('Rcpp')
require('shiny')
require('parallel')
require('multicool')
require('rugarch')
require('reshape2')
require('coda')
require('stochvol')
require('tsoutliers')
require('pracma')
require('VGAM')
require('MASS')
require('ExtDist')
require('survival')
require('Hmisc')
require('copula')
require('distr')
require('RQuantLib')
require('bizdays')
require('moments')
require('parallel')
require('foreach')
require('doParallel')
require('xts')
require('rmgarch')
require('DEoptim')
Parent.WD = 'C:/Users/Samuel/Documents/dfkjdf/'
asset.1 = list(symbol = 'TDG', Expiry = as.Date('2017-09-15'), Strike = 220,Right = 'PUT')
asset.2 = list(symbol = 'EL', Expiry = as.Date('2017-10-20'), Strike = 80,Right = 'PUT')
asset.3 = list(symbol = 'PM', Expiry = as.Date('2017-09-15'), Strike = 90,Right = 'PUT')
assets = lapply(1:3,function(x) return(get(paste0('asset.',x))))
SymbolList = unique(sapply(assets,function(x) ret
urn(x[['symbol']])))
}
###################################################################
#    Set Parameters
###################################################################
{
BackwardWaveLen  = 0
ForwardWaveLen  = 1
WaveLen = BackwardWaveLen + ForwardWaveLen + 1
}
###################################################################
#    Prepare Data Sets
###################################################################
{
Get.Clean.DatePrice = function(wd) {
####### Read in data  #############
setwd(wd)
Data_Prices = read.csv('Prices.csv', T)
Data_Dates = read.csv('Dates.csv', T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c('Earnings', 'FOMC', 'Xtreme'), mode = 'list')
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date), '%Y-%m-%d')
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type == x]), '%m/%d/%Y')
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE',
from = min(Date_Original) - 50,
to = '2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage, EventName)
{
return(sapply(List_EventDates[[EventName]], function(x)
return(
offset(x, stage, 'QuantLib/UnitedStates/NYSE') %in% Date_Original[-1]
)))
}
List_ExistVector = lapply(EventType, function(x) {
1 == apply(cbind(sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
WavelengthExistVector,
x
)), 1, prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType, function(x)
List_EventDates[[x]] = List_EventDates[[x]][List_ExistVector[[x]] == T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize, GrandDates, TargetDates)
{
ResultIndicator = rep(F, length(GrandDates))
ResultIndicator[pmax(match(TargetDates, GrandDates) + WaveSize, 1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
)
, 1, function(y) {
return (T %in% y)
})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic), ncol = length(EventType)), 1,
function(x) {
return(T %in% x)
})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x) {
return(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
) %*% (1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1] / Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent = mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent = sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1] ==
T)), Mean_ExEvent, 0) #Sd_ExEvent)
return(list(Date = Date_Original[-1], Return = as.ts(Return_ExEvent)))
}
DatePrices = lapply(paste0(Parent.WD, SymbolList), Get.Clean.DatePrice)
names(DatePrices) = SymbolList
########### Consolidate Date ###########
Date.Raw = unique(as.numeric(unlist(sapply(SymbolList, function(x) {
return(DatePrices[[x]]$Date)
}))))
Date.Final = as.Date(Date.Raw[order(Date.Raw)])
########### Consolidate Prices ###########
Return.Final = lapply(lapply(SymbolList, function(x) {
return(DatePrices[[x]]$Return[match(Date.Final, DatePrices[[x]]$Date)])
}), na.locf)
Final.DF = data.frame(matrix(
unlist(Return.Final),
byrow = F,
ncol = length(SymbolList)
))
names(Final.DF) = SymbolList
Final.DF$Date = Date.Final
}
{
# install.packages('Rcpp')
# install.packages('multicool')
# install.packages('rugarch')
# install.packages('coda')
# install.packages('stochvol')
# install.packages('shiny')
# install.packages('tsoutliers')
# install.packages('pracma')
# install.packages('VGAM')
# install.packages('MASS')
# install.packages('ExtDist')
# install.packages('survival')
# install.packages('Hmisc')
# install.packages('copula')
# install.packages('distr')
# {
#  install.packages('drat')
#  drat::addRepo('ghrr')
#  install.packages('RQuantLib', type='binary')
# }
# install.packages('bizdays')
#
# install.packages('moments')
# install.packages('snow')
# install.packages('parallel')
# install.packages('foreach')
# install.packages('doParallel')
# install.packages('xts')
# install.packages('rmgarch')
require('Rcpp')
require('shiny')
require('parallel')
require('multicool')
require('rugarch')
require('reshape2')
require('coda')
require('stochvol')
require('tsoutliers')
require('pracma')
require('VGAM')
require('MASS')
require('ExtDist')
require('survival')
require('Hmisc')
require('copula')
require('distr')
require('RQuantLib')
require('bizdays')
require('moments')
require('parallel')
require('foreach')
require('doParallel')
require('xts')
require('rmgarch')
require('DEoptim')
Parent.WD = 'C:/Users/Samuel/Documents/dfkjdf/'
asset.1 = list(symbol = 'TDG', Expiry = as.Date('2017-09-15'), Strike = 220,Right = 'PUT')
asset.2 = list(symbol = 'EL', Expiry = as.Date('2017-10-20'), Strike = 80,Right = 'PUT')
asset.3 = list(symbol = 'PM', Expiry = as.Date('2017-09-15'), Strike = 90,Right = 'PUT')
assets = lapply(1:3,function(x) return(get(paste0('asset.',x))))
SymbolList = unique(sapply(assets,function(x) ret
urn(x[['symbol']])))
}
###################################################################
#    Prepare Libraries
###################################################################
{
# install.packages('Rcpp')
# install.packages('multicool')
# install.packages('rugarch')
# install.packages('coda')
# install.packages('stochvol')
# install.packages('shiny')
# install.packages('tsoutliers')
# install.packages('pracma')
# install.packages('VGAM')
# install.packages('MASS')
# install.packages('ExtDist')
# install.packages('survival')
# install.packages('Hmisc')
# install.packages('copula')
# install.packages('distr')
# {
#  install.packages('drat')
#  drat::addRepo('ghrr')
#  install.packages('RQuantLib', type='binary')
# }
# install.packages('bizdays')
#
# install.packages('moments')
# install.packages('snow')
# install.packages('parallel')
# install.packages('foreach')
# install.packages('doParallel')
# install.packages('xts')
# install.packages('rmgarch')
require('Rcpp')
require('shiny')
require('parallel')
require('multicool')
require('rugarch')
require('reshape2')
require('coda')
require('stochvol')
require('tsoutliers')
require('pracma')
require('VGAM')
require('MASS')
require('ExtDist')
require('survival')
require('Hmisc')
require('copula')
require('distr')
require('RQuantLib')
require('bizdays')
require('moments')
require('parallel')
require('foreach')
require('doParallel')
require('xts')
require('rmgarch')
require('DEoptim')
Parent.WD = 'C:/Users/Samuel/Documents/dfkjdf/'
asset.1 = list(symbol = 'TDG', Expiry = as.Date('2017-09-15'), Strike = 220,Right = 'PUT')
asset.2 = list(symbol = 'EL', Expiry = as.Date('2017-10-20'), Strike = 80,Right = 'PUT')
asset.3 = list(symbol = 'PM', Expiry = as.Date('2017-09-15'), Strike = 90,Right = 'PUT')
assets = lapply(1:3,function(x) return(get(paste0('asset.',x))))
SymbolList = unique(sapply(assets,function(x) return(x[['symbol']])))
}
###################################################################
#    Set Parameters
###################################################################
{
BackwardWaveLen  = 0
ForwardWaveLen  = 1
WaveLen = BackwardWaveLen + ForwardWaveLen + 1
}
###################################################################
#    Prepare Data Sets
###################################################################
{
Get.Clean.DatePrice = function(wd) {
####### Read in data  #############
setwd(wd)
Data_Prices = read.csv('Prices.csv', T)
Data_Dates = read.csv('Dates.csv', T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c('Earnings', 'FOMC', 'Xtreme'), mode = 'list')
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date), '%Y-%m-%d')
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type == x]), '%m/%d/%Y')
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE',
from = min(Date_Original) - 50,
to = '2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage, EventName)
{
return(sapply(List_EventDates[[EventName]], function(x)
return(
offset(x, stage, 'QuantLib/UnitedStates/NYSE') %in% Date_Original[-1]
)))
}
List_ExistVector = lapply(EventType, function(x) {
1 == apply(cbind(sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
WavelengthExistVector,
x
)), 1, prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType, function(x)
List_EventDates[[x]] = List_EventDates[[x]][List_ExistVector[[x]] == T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize, GrandDates, TargetDates)
{
ResultIndicator = rep(F, length(GrandDates))
ResultIndicator[pmax(match(TargetDates, GrandDates) + WaveSize, 1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
)
, 1, function(y) {
return (T %in% y)
})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic), ncol = length(EventType)), 1,
function(x) {
return(T %in% x)
})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x) {
return(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
) %*% (1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1] / Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent = mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent = sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1] ==
T)), Mean_ExEvent, 0) #Sd_ExEvent)
return(list(Date = Date_Original[-1], Return = as.ts(Return_ExEvent)))
}
DatePrices = lapply(paste0(Parent.WD, SymbolList), Get.Clean.DatePrice)
names(DatePrices) = SymbolList
########### Consolidate Date ###########
Date.Raw = unique(as.numeric(unlist(sapply(SymbolList, function(x) {
return(DatePrices[[x]]$Date)
}))))
Date.Final = as.Date(Date.Raw[order(Date.Raw)])
########### Consolidate Prices ###########
Return.Final = lapply(lapply(SymbolList, function(x) {
return(DatePrices[[x]]$Return[match(Date.Final, DatePrices[[x]]$Date)])
}), na.locf)
Final.DF = data.frame(matrix(
unlist(Return.Final),
byrow = F,
ncol = length(SymbolList)
))
names(Final.DF) = SymbolList
Final.DF$Date = Date.Final
}
Get.Clean.DatePrice = function(wd) {
####### Read in data  #############
setwd(wd)
Data_Prices = read.csv('Prices.csv', T)
Data_Dates = read.csv('Dates.csv', T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c('Earnings', 'FOMC', 'Xtreme'), mode = 'list')
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date), '%Y-%m-%d')
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type == x]), '%m/%d/%Y')
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE',
from = min(Date_Original) - 50,
to = '2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage, EventName)
{
return(sapply(List_EventDates[[EventName]], function(x)
return(
offset(x, stage, 'QuantLib/UnitedStates/NYSE') %in% Date_Original[-1]
)))
}
List_ExistVector = lapply(EventType, function(x) {
1 == apply(cbind(sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
WavelengthExistVector,
x
)), 1, prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType, function(x)
List_EventDates[[x]] = List_EventDates[[x]][List_ExistVector[[x]] == T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize, GrandDates, TargetDates)
{
ResultIndicator = rep(F, length(GrandDates))
ResultIndicator[pmax(match(TargetDates, GrandDates) + WaveSize, 1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
)
, 1, function(y) {
return (T %in% y)
})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic), ncol = length(EventType)), 1,
function(x) {
return(T %in% x)
})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x) {
return(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
) %*% (1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1] / Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent = mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent = sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1] ==
T)), Mean_ExEvent, 0) #Sd_ExEvent)
return(list(Date = Date_Original[-1], Return = as.ts(Return_ExEvent)))
}
DatePrices = lapply(paste0(Parent.WD, SymbolList), Get.Clean.DatePrice)
SymbolList
wd = paste0(Parent.WD, 'TDG')
wd = paste0(Parent.WD, 'TDG')
setwd(wd)
Data_Prices = read.csv('Prices.csv', T)
Data_Dates = read.csv('Dates.csv', T)
Prices_Original = Data_Prices$Close
N = length(Prices_Original)
EventType = as.vector(c('Earnings', 'FOMC', 'Xtreme'), mode = 'list')
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date), '%Y-%m-%d')
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type == x]), '%m/%d/%Y')
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE',
from = min(Date_Original) - 50,
to = '2021-12-29')
min(Date_Original)
