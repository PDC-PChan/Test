List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type == x]), '%m/%d/%Y')
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE',
from = min(Date_Original) - 50,
to = '2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage, EventName)
{
return(sapply(List_EventDates[[EventName]], function(x)
return(
offset(x, stage, 'QuantLib/UnitedStates/NYSE') %in% Date_Original[-1]
)))
}
List_ExistVector = lapply(EventType, function(x) {
1 == apply(cbind(sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
WavelengthExistVector,
x
)), 1, prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType, function(x)
List_EventDates[[x]] = List_EventDates[[x]][List_ExistVector[[x]] == T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize, GrandDates, TargetDates)
{
ResultIndicator = rep(F, length(GrandDates))
ResultIndicator[pmax(match(TargetDates, GrandDates) + WaveSize, 1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
)
, 1, function(y) {
return (T %in% y)
})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic), ncol = length(EventType)), 1,
function(x) {
return(T %in% x)
})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x) {
return(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
) %*% (1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1] / Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent = mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent = sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1] ==
T)), Mean_ExEvent, 0) #Sd_ExEvent)
return(list(Date = Date_Original[-1], Return = as.ts(Return_ExEvent)))
}
DatePrices = lapply(paste0(Parent.WD, SymbolList), Get.Clean.DatePrice)
names(DatePrices) = SymbolList
########### Consolidate Date ###########
Date.Raw = unique(as.numeric(unlist(sapply(SymbolList, function(x) {
return(DatePrices[[x]]$Date)
}))))
Date.Final = as.Date(Date.Raw[order(Date.Raw)])
########### Consolidate Prices ###########
Return.Final = lapply(lapply(SymbolList, function(x) {
return(DatePrices[[x]]$Return[match(Date.Final, DatePrices[[x]]$Date)])
}), na.locf)
Final.DF = data.frame(matrix(
unlist(Return.Final),
byrow = F,
ncol = length(SymbolList)
))
names(Final.DF) = SymbolList
Final.DF$Date = Date.Final
View(Final.DF)
asset.1 = list(symbol = 'TIF', Expiry = as.Date('2018-01-19'), Strike = 82.5,Right = 'PUT')
asset.2 = list(symbol = 'ADP', Expiry = as.Date('2018-02-16'), Strike = 105,Right = 'PUT')
asset.3 = list(symbol = 'PM', Expiry = as.Date('2018-01-19'), Strike = 85,Right = 'PUT')
asset.4 = list(symbol = 'AAPL', Expiry = as.Date('2018-02-16'), Strike = 150,Right = 'PUT')
asset.5 = list(symbol = 'QCOM', Expiry = as.Date('2018-03-16'), Strike = 55,Right = 'PUT')
asset.6 = list(symbol = 'GLW', Expiry = as.Date('2018-02-16'), Strike = 28,Right = 'PUT')
asset.7 = list(symbol = 'ADSK', Expiry = as.Date('2018-01-19'), Strike = 85,Right = 'PUT')
asset.8 = list(symbol = 'CSCO', Expiry = as.Date('2018-02-16'), Strike = 33,Right = 'PUT')
asset.9 = list(symbol = 'TIF', Expiry = as.Date('2018-01-19'), Strike = 80,Right = 'PUT')
asset.10 = list(symbol = 'XOM', Expiry = as.Date('2018-02-16'), Strike = 77.5,Right = 'PUT')
asset.11 = list(symbol = 'MDT', Expiry = as.Date('2018-01-26'), Strike = 74.5,Right = 'PUT')
asset.12 = list(symbol = 'TDG', Expiry = as.Date('2018-01-19'), Strike = 200,Right = 'PUT')
asset.13 = list(symbol = 'BA', Expiry = as.Date('2018-01-26'), Strike = 270,Right = 'PUT')
asset.14 = list(symbol = 'TDG', Expiry = as.Date('2018-02-16'), Strike = 228,Right = 'PUT')
asset.15 = list(symbol = 'CRM', Expiry = as.Date('2018-02-16'), Strike = 87.5,Right = 'PUT')
asset.16 = list(symbol = 'TXN', Expiry = as.Date('2018-01-19'), Strike = 67.5,Right = 'PUT')
asset.17 = list(symbol = 'ACN', Expiry = as.Date('2018-01-19'), Strike = 110,Right = 'PUT')
asset.18 = list(symbol = 'RHT', Expiry = as.Date('2018-01-19'), Strike = 95,Right = 'PUT')
asset.19 = list(symbol = 'RHT', Expiry = as.Date('2018-01-19'), Strike = 97.5,Right = 'PUT')
asset.20 = list(symbol = 'TIF', Expiry = as.Date('2018-02-16'), Strike = 80,Right = 'PUT')
asset.21 = list(symbol = 'UNP', Expiry = as.Date('2018-01-19'), Strike = 87.5,Right = 'PUT')
asset.22 = list(symbol = 'RHT', Expiry = as.Date('2018-01-19'), Strike = 90,Right = 'PUT')
asset.23 = list(symbol = 'CRM', Expiry = as.Date('2018-02-16'), Strike = 82.5,Right = 'PUT')
asset.24 = list(symbol = 'ADSK', Expiry = as.Date('2018-01-26'), Strike = 85,Right = 'PUT')
asset.25 = list(symbol = 'TIF', Expiry = as.Date('2018-02-16'), Strike = 82.5,Right = 'PUT')
asset.26 = list(symbol = 'T', Expiry = as.Date('2018-02-16'), Strike = 33,Right = 'PUT')
asset.27 = list(symbol = 'AMZN', Expiry = as.Date('2018-02-16'), Strike = 925,Right = 'PUT')
asset.28 = list(symbol = 'BA', Expiry = as.Date('2018-01-12'), Strike = 250,Right = 'PUT')
asset.29 = list(symbol = 'CRM', Expiry = as.Date('2018-02-16'), Strike = 85,Right = 'PUT')
asset.30 = list(symbol = 'MDT', Expiry = as.Date('2018-02-16'), Strike = 70,Right = 'PUT')
asset.31 = list(symbol = 'CSCO', Expiry = as.Date('2018-02-16'), Strike = 34,Right = 'PUT')
asset.32 = list(symbol = 'EBAY', Expiry = as.Date('2018-02-16'), Strike = 32,Right = 'PUT')
asset.33 = list(symbol = 'INTC', Expiry = as.Date('2018-02-16'), Strike = 42,Right = 'PUT')
asset.34 = list(symbol = 'AMZN', Expiry = as.Date('2018-02-16'), Strike = 930,Right = 'PUT')
asset.35 = list(symbol = 'EBAY', Expiry = as.Date('2018-02-16'), Strike = 31,Right = 'PUT')
asset.36 = list(symbol = 'PM', Expiry = as.Date('2018-01-19'), Strike = 75,Right = 'PUT')
asset.37 = list(symbol = 'UNP', Expiry = as.Date('2018-01-19'), Strike = 85,Right = 'PUT')
asset.38 = list(symbol = 'IBM', Expiry = as.Date('2018-01-26'), Strike = 140,Right = 'PUT')
asset.39 = list(symbol = 'V', Expiry = as.Date('2018-01-19'), Strike = 95,Right = 'PUT')
asset.40 = list(symbol = 'EBAY', Expiry = as.Date('2018-02-16'), Strike = 33,Right = 'PUT')
asset.41 = list(symbol = 'NVDA', Expiry = as.Date('2018-02-16'), Strike = 140,Right = 'PUT')
asset.42 = list(symbol = 'AAPL', Expiry = as.Date('2018-01-26'), Strike = 155,Right = 'PUT')
asset.43 = list(symbol = 'V', Expiry = as.Date('2018-01-26'), Strike = 98.5,Right = 'PUT')
asset.44 = list(symbol = 'RHT', Expiry = as.Date('2017-12-29'), Strike = 95,Right = 'PUT')
asset.45 = list(symbol = 'CPB', Expiry = as.Date('2018-02-16'), Strike = 41,Right = 'PUT')
asset.46 = list(symbol = 'RHT', Expiry = as.Date('2018-01-19'), Strike = 92.5,Right = 'PUT')
asset.47 = list(symbol = 'NVDA', Expiry = as.Date('2018-02-16'), Strike = 150,Right = 'PUT')
asset.48 = list(symbol = 'CAT', Expiry = as.Date('2018-01-26'), Strike = 125,Right = 'PUT')
asset.49 = list(symbol = 'CAT', Expiry = as.Date('2018-02-16'), Strike = 120,Right = 'PUT')
asset.50 = list(symbol = 'MMM', Expiry = as.Date('2018-01-26'), Strike = 212.5,Right = 'PUT')
asset.51 = list(symbol = 'CPB', Expiry = as.Date('2018-02-16'), Strike = 44,Right = 'PUT')
asset.52 = list(symbol = 'TXN', Expiry = as.Date('2018-01-12'), Strike = 85,Right = 'PUT')
asset.53 = list(symbol = 'GD', Expiry = as.Date('2018-02-16'), Strike = 175,Right = 'PUT')
asset.54 = list(symbol = 'CPB', Expiry = as.Date('2018-02-16'), Strike = 42,Right = 'PUT')
asset.55 = list(symbol = 'CPB', Expiry = as.Date('2018-01-19'), Strike = 36,Right = 'PUT')
asset.56 = list(symbol = 'CPB', Expiry = as.Date('2018-02-16'), Strike = 43,Right = 'PUT')
asset.57 = list(symbol = 'TDG', Expiry = as.Date('2018-01-19'), Strike = 240,Right = 'PUT')
asset.58 = list(symbol = 'MA', Expiry = as.Date('2018-01-05'), Strike = 125,Right = 'PUT')
asset.59 = list(symbol = 'MA', Expiry = as.Date('2018-02-16'), Strike = 130,Right = 'PUT')
asset.60 = list(symbol = 'TDG', Expiry = as.Date('2018-01-19'), Strike = 230,Right = 'PUT')
asset.61 = list(symbol = 'TDG', Expiry = as.Date('2018-01-19'), Strike = 228,Right = 'PUT')
asset.62 = list(symbol = 'AMZN', Expiry = as.Date('2018-01-19'), Strike = 1005,Right = 'PUT')
asset.63 = list(symbol = 'CAT', Expiry = as.Date('2018-01-19'), Strike = 135,Right = 'PUT')
asset.64 = list(symbol = 'TEL', Expiry = as.Date('2018-01-19'), Strike = 85,Right = 'PUT')
asset.65 = list(symbol = 'BA', Expiry = as.Date('2018-01-19'), Strike = 250,Right = 'PUT')
asset.66 = list(symbol = 'IBM', Expiry = as.Date('2018-02-16'), Strike = 135,Right = 'PUT')
asset.67 = list(symbol = 'RTN', Expiry = as.Date('2018-02-16'), Strike = 165,Right = 'PUT')
assets = lapply(1:67,function(x) return (get(paste0('asset.', x))))
###################################################################
#    Prepare Libraries
###################################################################
{
# install.packages('Rcpp')
# install.packages('multicool')
# install.packages('rugarch')
# install.packages('coda')
# install.packages('stochvol')
# install.packages('shiny')
# install.packages('tsoutliers')
# install.packages('pracma')
# install.packages('VGAM')
# install.packages('MASS')
# install.packages('ExtDist')
# install.packages('survival')
# install.packages('Hmisc')
# install.packages('copula')
# install.packages('distr')
# {
#  install.packages('drat')
#  drat::addRepo('ghrr')
#  install.packages('RQuantLib', type='binary')
# }
# install.packages('bizdays')
#
# install.packages('moments')
# install.packages('snow')
# install.packages('parallel')
# install.packages('foreach')
# install.packages('doParallel')
# install.packages('xts')
# install.packages('rmgarch')
require('Rcpp')
require('shiny')
require('parallel')
require('multicool')
require('rugarch')
require('reshape2')
require('coda')
require('stochvol')
require('tsoutliers')
require('pracma')
require('VGAM')
require('MASS')
require('ExtDist')
require('survival')
require('Hmisc')
require('copula')
require('distr')
require('RQuantLib')
require('bizdays')
require('moments')
require('parallel')
require('foreach')
require('doParallel')
require('xts')
require('rmgarch')
require('DEoptim')
Parent.WD = 'C:/Users/Samuel/Documents/dfkjdf/'
# asset.1 = list(symbol = 'TDG', Expiry = as.Date('2017-09-15'), Strike = 220,Right = 'PUT')
# asset.2 = list(symbol = 'EL', Expiry = as.Date('2017-10-20'), Strike = 80,Right = 'PUT')
# asset.3 = list(symbol = 'PM', Expiry = as.Date('2017-09-15'), Strike = 90,Right = 'PUT')
# assets = lapply(1:3,function(x) return(get(paste0('asset.',x))))
SymbolList = unique(sapply(assets,function(x) return(x[['symbol']])))
}
###################################################################
#    Set Parameters
###################################################################
{
BackwardWaveLen  = 0
ForwardWaveLen  = 1
WaveLen = BackwardWaveLen + ForwardWaveLen + 1
}
###################################################################
#    Prepare Data Sets
###################################################################
{
Get.Clean.DatePrice = function(wd) {
####### Read in data  #############
setwd(wd)
Data_Prices = read.csv('Prices.csv', T)
Data_Dates = read.csv('Dates.csv', T)
Prices_Original = as.numeric(as.character(Data_Prices$Close))
N = length(Prices_Original)
EventType = as.vector(c('Earnings', 'FOMC', 'Xtreme'), mode = 'list')
####### Define Dates and Event Dates #############
Date_Original = as.Date(as.character(Data_Prices$Date), '%Y-%m-%d')
Prices_Original = Prices_Original[order(Date_Original)]
Date_Original = sort(Date_Original)
List_EventDates = lapply(EventType, function(x) {
as.Date(as.character(Data_Dates$Date[Data_Dates$Type == x]), '%m/%d/%Y')
})
names(List_EventDates) = EventType
load_quantlib_calendars('UnitedStates/NYSE',
from = min(Date_Original) - 50,
to = '2021-12-29')
### Trim Date to make sure whole wave exists
WavelengthExistVector = function(stage, EventName)
{
return(sapply(List_EventDates[[EventName]], function(x)
return(
offset(x, stage, 'QuantLib/UnitedStates/NYSE') %in% Date_Original[-1]
)))
}
List_ExistVector = lapply(EventType, function(x) {
1 == apply(cbind(sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
WavelengthExistVector,
x
)), 1, prod)
})
names(List_ExistVector) = EventType
List_EventDates = lapply(EventType, function(x)
List_EventDates[[x]] = List_EventDates[[x]][List_ExistVector[[x]] == T])
names(List_EventDates) = EventType
####### Define Event Indicator #############
CreateIndicator = function(WaveSize, GrandDates, TargetDates)
{
ResultIndicator = rep(F, length(GrandDates))
ResultIndicator[pmax(match(TargetDates, GrandDates) + WaveSize, 1)] = T
return(ResultIndicator)
}
List_EventDatesLogic = lapply(EventType, function(x) {
apply(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
)
, 1, function(y) {
return (T %in% y)
})
})
names(List_EventDatesLogic) = EventType
AllEventsLogic = apply(matrix(unlist(List_EventDatesLogic), ncol = length(EventType)), 1,
function(x) {
return(T %in% x)
})
####### Define Event Stage Identifier #############
List_EventIdentifier = lapply(EventType, function(x) {
return(cbind(
sapply(
seq(-BackwardWaveLen, ForwardWaveLen),
CreateIndicator,
Date_Original,
List_EventDates[[x]]
)
) %*% (1:(WaveLen)))
})
names(List_EventIdentifier) = EventType
##### 1. Return_Original ######
Return_Original = log(Prices_Original[-1] / Prices_Original[-N])
##### 2. Return_ExEvent ######
Return_ExEvent = Return_Original
Mean_ExEvent = mean(Return_ExEvent[AllEventsLogic[-1] == F])
Sd_ExEvent = sd(Return_ExEvent[AllEventsLogic[-1] == F])
Return_ExEvent[AllEventsLogic[-1] == T] = rnorm(length(which(AllEventsLogic[-1] ==
T)), Mean_ExEvent, 0) #Sd_ExEvent)
return(list(Date = Date_Original[-1], Return = as.ts(Return_ExEvent)))
}
DatePrices = lapply(paste0(Parent.WD, SymbolList), Get.Clean.DatePrice)
names(DatePrices) = SymbolList
########### Consolidate Date ###########
Date.Raw = unique(as.numeric(unlist(sapply(SymbolList, function(x) {
return(DatePrices[[x]]$Date)
}))))
Date.Final = as.Date(Date.Raw[order(Date.Raw)])
########### Consolidate Prices ###########
Return.Final = lapply(lapply(SymbolList, function(x) {
return(DatePrices[[x]]$Return[match(Date.Final, DatePrices[[x]]$Date)])
}), na.locf)
Final.DF = data.frame(matrix(
unlist(Return.Final),
byrow = F,
ncol = length(SymbolList)
))
names(Final.DF) = SymbolList
Final.DF$Date = Date.Final
}
###################################################################
#    Fit GARCH Models to ExEvent Returns
###################################################################
{
noise = c('norm',
'snorm',
'std',
'sstd',
'ged',
'sged',
'nig',
'ghyp',
'jsu')
ARMA.Order = c(3, 2)
GetMaxLLSpec = function(symbol) {
Ret_ExEvent = as.ts(Final.DF[symbol])
# Remove all additive outliers
tsoModel = tso(
y = Ret_ExEvent,
types = c('AO'),
tsmethod = 'auto.arima',
args.tsmodel = list(model = 'local-level')
)
# Fit Garch with noise type of Max LL
GarchLL = function(noiseType, inputData)
{
spec = ugarchspec(
mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),
variance.model = list(model = 'gjrGARCH'),
distribution.model = noiseType
)
fit = ugarchfit(spec, data = inputData, solver = 'hybrid')
return(likelihood(fit))
}
no_cores <<- detectCores() - 1
cl <<- makeCluster(no_cores)
clusterExport(cl, c('ARMA.Order'))
clusterEvalQ(cl, library('rugarch'))
GarchLL = parSapply(cl, noise, GarchLL, tsoModel$yadj)
stopCluster(cl)
#GarchLL  = sapply(noise, GarchLL, tsoModel$yadj)
maxGarchLLIndex = which(GarchLL == max(GarchLL))
maxGarchSpec = ugarchspec(
mean.model = list(armaOrder = ARMA.Order, include.mean = TRUE),
variance.model = list(model = 'gjrGARCH'),
distribution.model = noise[maxGarchLLIndex]
)
maxGarchFit = ugarchfit(maxGarchSpec, data = tsoModel$yadj, solver = 'hybrid')
return(list(Fit = maxGarchFit, Spec = maxGarchSpec))
# return( list(Spec =maxGarchSpec ))
}
}
###################################################################
#    Generate New Time Series
###################################################################
{
####### Simulation Initialization #############
{
NPaths = 10000
SimulationEndDate = preceding(as.Date("2017-12-31", "%Y-%m-%d"),
'QuantLib/UnitedStates/NYSE')
SimulationStartDate = adjust("UnitedStates/NYSE", max(Final.DF$Date, 1) +
1)
NumOfDays = bizdays(SimulationStartDate,
SimulationEndDate,
'QuantLib/UnitedStates/NYSE') + 1
Date_Future = bizseq(SimulationStartDate,SimulationEndDate,'QuantLib/UnitedStates/NYSE')
}
####### Read in Shock Matricess  #############
{
Read.ShockMatrix = function(futureDates, FilePath){
DataIn = read.csv(FilePath,header = F)
Date.Index = match(futureDates,as.Date(DataIn[,1],'1970-01-01'))
return(as.matrix(DataIn[,-1])[Date.Index,])
}
List.ShockMatrices = lapply(paste0(Parent.WD, SymbolList, '/ShockMatrix.csv'), function(fileAdd) {
return(Read.ShockMatrix(Date_Future, fileAdd))
})
names(List.ShockMatrices) = SymbolList
}
####### Simulate and consolidate GARCH process  #############
Simmed.Path.List = list()
no_cores <<- detectCores()-1
cl <<- makeCluster(no_cores)
shutUp = clusterExport(cl,ls(.GlobalEnv))
clusterEvalQ(cl, library(tsoutliers))
clusterEvalQ(cl, library(rugarch))
Simmed.Path.List = parLapply(cl,SymbolList,function(x){
maxGarchFit = GetMaxLLSpec(x)$Fit
garchModel = ugarchsim(maxGarchFit,n.sim = NumOfDays,m.sim = NPaths,
startMethod =  "sample")
print(paste(x,' done'))
return(fitted(garchModel))
})
stopCluster(cl)
names(Simmed.Path.List) = SymbolList
for(i in (1:length(SymbolList))){
symbol = SymbolList[i]
Simmed.Path.List[[symbol]][List.ShockMatrices[[symbol]][,1]!=0,] = 0
Simmed.Path.List[[symbol]] = Simmed.Path.List[[symbol]] + List.ShockMatrices[[symbol]]
}
rm(List.ShockMatrices)
gc()
}
{
Calculate_Fitted.Expiry.Prices = function(symbol,ExpiryDate)
{
####### Read in data  #############
setwd(paste0(Parent.WD,'/',symbol ))
Data_Prices = read.csv('Prices.csv', T)
LastClose = Data_Prices$Close[as.Date(Data_Prices$Date,'%Y-%m-%d') == max(Final.DF$Date)]
MaturityLength = bizdays(SimulationStartDate, ExpiryDate, 'QuantLib/UnitedStates/NYSE')+1
Fitted.Expiry.Returns = apply(Simmed.Path.List[[symbol]],2,function(x){
prod(exp(head(x,MaturityLength)))
})
return(LastClose*Fitted.Expiry.Returns)
}
GetLastClose = function(symbol)
{
setwd(paste0(Parent.WD,'/',symbol ))
Data_Prices = read.csv('Prices.csv', T)
LastClose = Data_Prices$Close[as.Date(Data_Prices$Date,'%Y-%m-%d') == max(Final.DF$Date)]
return(LastClose)
}
GetCloseChange = function(symbol)
{
setwd(paste0(Parent.WD,'/',symbol ))
Data_Prices = read.csv('Prices.csv', T)
LastClose = Data_Prices$Close[as.Date(Data_Prices$Date,'%Y-%m-%d') == max(Final.DF$Date)]
N = length(Data_Prices$Close)
secondLast.Date = sort(Final.DF$Date)[N-2]
secondLast = Data_Prices$Close[as.Date(Data_Prices$Date,'%Y-%m-%d') == secondLast.Date]
return(log(LastClose)-log(secondLast))
}
payoff = function(ST,K,Premium,Right = 'PUT'){
direction = 2*(Right == 'PUT')-1
return(Premium - max(direction*(K-ST),0))
}
Probability.OTM = function(K,Sim.Prices, Right = 'PUT'){
direction = 2*(Right == 'PUT')-1
return(sum(direction*(Sim.Prices-K) > 0)/NPaths)
}
Cond.Loss = function(K,Sim.Prices, Right = 'PUT'){
direction = 2*(Right == 'PUT')-1
conLoss = mean(direction*(K-Sim.Prices[(direction*(K-Sim.Prices))>0]))
if(is.na(conLoss)) conLoss = 0
return(conLoss)
}
ExReturn = function(K,Sim.Prices,Premium,Right = 'PUT'){
return(mean(sapply(Sim.Prices,payoff,K,Premium,Right)))
}
SDReturn = function(K,Sim.Prices,Premium,Right = 'PUT'){
return(sd(sapply(Sim.Prices,payoff,K,Premium,Right)))
}
}
Prob.OTM = sapply(assets,function(asset){
Sim.Prices = Calculate_Fitted.Expiry.Prices(asset$symbol,asset$Expiry)
return(Probability.OTM(K = asset$Strike,Sim.Prices=Sim.Prices,Right = asset$Right))
})
Ex.Payoff = sapply(assets,function(asset){
Sim.Prices = Calculate_Fitted.Expiry.Prices(asset$symbol,asset$Expiry)
return(ExReturn(K = asset$Strike,Sim.Prices=Sim.Prices,Premium = asset$Premium,Right = asset$Right))
})
Last.Closes = sapply(assets,function(asset){
return(GetLastClose(asset$symbol))
})
Last.Change = sapply(assets,function(asset){
return(GetCloseChange(asset$symbol))
})
Prob.OTM
